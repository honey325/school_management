
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model subjects
 * 
 */
export type subjects = $Result.DefaultSelection<Prisma.$subjectsPayload>
/**
 * Model subTeacher
 * 
 */
export type subTeacher = $Result.DefaultSelection<Prisma.$subTeacherPayload>
/**
 * Model attendance
 * 
 */
export type attendance = $Result.DefaultSelection<Prisma.$attendancePayload>
/**
 * Model exams
 * 
 */
export type exams = $Result.DefaultSelection<Prisma.$examsPayload>
/**
 * Model result
 * 
 */
export type result = $Result.DefaultSelection<Prisma.$resultPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs>;

  /**
   * `prisma.subjects`: Exposes CRUD operations for the **subjects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subjects.findMany()
    * ```
    */
  get subjects(): Prisma.subjectsDelegate<ExtArgs>;

  /**
   * `prisma.subTeacher`: Exposes CRUD operations for the **subTeacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubTeachers
    * const subTeachers = await prisma.subTeacher.findMany()
    * ```
    */
  get subTeacher(): Prisma.subTeacherDelegate<ExtArgs>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.attendanceDelegate<ExtArgs>;

  /**
   * `prisma.exams`: Exposes CRUD operations for the **exams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exams.findMany()
    * ```
    */
  get exams(): Prisma.examsDelegate<ExtArgs>;

  /**
   * `prisma.result`: Exposes CRUD operations for the **result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Results
    * const results = await prisma.result.findMany()
    * ```
    */
  get result(): Prisma.resultDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    role: 'role',
    subjects: 'subjects',
    subTeacher: 'subTeacher',
    attendance: 'attendance',
    exams: 'exams',
    result: 'result'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'role' | 'subjects' | 'subTeacher' | 'attendance' | 'exams' | 'result'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      subjects: {
        payload: Prisma.$subjectsPayload<ExtArgs>
        fields: Prisma.subjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subjectsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subjectsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          findFirst: {
            args: Prisma.subjectsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subjectsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          findMany: {
            args: Prisma.subjectsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>[]
          }
          create: {
            args: Prisma.subjectsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          createMany: {
            args: Prisma.subjectsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.subjectsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          update: {
            args: Prisma.subjectsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          deleteMany: {
            args: Prisma.subjectsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.subjectsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.subjectsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          aggregate: {
            args: Prisma.SubjectsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubjects>
          }
          groupBy: {
            args: Prisma.subjectsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.subjectsCountArgs<ExtArgs>,
            result: $Utils.Optional<SubjectsCountAggregateOutputType> | number
          }
        }
      }
      subTeacher: {
        payload: Prisma.$subTeacherPayload<ExtArgs>
        fields: Prisma.subTeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subTeacherFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subTeacherFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          findFirst: {
            args: Prisma.subTeacherFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subTeacherFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          findMany: {
            args: Prisma.subTeacherFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>[]
          }
          create: {
            args: Prisma.subTeacherCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          createMany: {
            args: Prisma.subTeacherCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.subTeacherDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          update: {
            args: Prisma.subTeacherUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          deleteMany: {
            args: Prisma.subTeacherDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.subTeacherUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.subTeacherUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$subTeacherPayload>
          }
          aggregate: {
            args: Prisma.SubTeacherAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubTeacher>
          }
          groupBy: {
            args: Prisma.subTeacherGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubTeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.subTeacherCountArgs<ExtArgs>,
            result: $Utils.Optional<SubTeacherCountAggregateOutputType> | number
          }
        }
      }
      attendance: {
        payload: Prisma.$attendancePayload<ExtArgs>
        fields: Prisma.attendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attendanceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findFirst: {
            args: Prisma.attendanceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findMany: {
            args: Prisma.attendanceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>[]
          }
          create: {
            args: Prisma.attendanceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          createMany: {
            args: Prisma.attendanceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.attendanceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          update: {
            args: Prisma.attendanceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          deleteMany: {
            args: Prisma.attendanceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.attendanceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.attendanceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.attendanceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.attendanceCountArgs<ExtArgs>,
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      exams: {
        payload: Prisma.$examsPayload<ExtArgs>
        fields: Prisma.examsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.examsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.examsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          findFirst: {
            args: Prisma.examsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.examsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          findMany: {
            args: Prisma.examsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>[]
          }
          create: {
            args: Prisma.examsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          createMany: {
            args: Prisma.examsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.examsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          update: {
            args: Prisma.examsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          deleteMany: {
            args: Prisma.examsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.examsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.examsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examsPayload>
          }
          aggregate: {
            args: Prisma.ExamsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExams>
          }
          groupBy: {
            args: Prisma.examsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExamsGroupByOutputType>[]
          }
          count: {
            args: Prisma.examsCountArgs<ExtArgs>,
            result: $Utils.Optional<ExamsCountAggregateOutputType> | number
          }
        }
      }
      result: {
        payload: Prisma.$resultPayload<ExtArgs>
        fields: Prisma.resultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.resultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.resultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          findFirst: {
            args: Prisma.resultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.resultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          findMany: {
            args: Prisma.resultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>[]
          }
          create: {
            args: Prisma.resultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          createMany: {
            args: Prisma.resultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.resultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          update: {
            args: Prisma.resultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          deleteMany: {
            args: Prisma.resultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.resultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.resultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultPayload>
          }
          aggregate: {
            args: Prisma.ResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResult>
          }
          groupBy: {
            args: Prisma.resultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.resultCountArgs<ExtArgs>,
            result: $Utils.Optional<ResultCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    subTeacher: number
    attendance: number
    result: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subTeacher?: boolean | UsersCountOutputTypeCountSubTeacherArgs
    attendance?: boolean | UsersCountOutputTypeCountAttendanceArgs
    result?: boolean | UsersCountOutputTypeCountResultArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSubTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subTeacherWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultWhereInput
  }


  /**
   * Count Type SubjectsCountOutputType
   */

  export type SubjectsCountOutputType = {
    subTeacher: number
    result: number
  }

  export type SubjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subTeacher?: boolean | SubjectsCountOutputTypeCountSubTeacherArgs
    result?: boolean | SubjectsCountOutputTypeCountResultArgs
  }

  // Custom InputTypes
  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectsCountOutputType
     */
    select?: SubjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountSubTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subTeacherWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultWhereInput
  }


  /**
   * Count Type ExamsCountOutputType
   */

  export type ExamsCountOutputType = {
    result: number
  }

  export type ExamsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | ExamsCountOutputTypeCountResultArgs
  }

  // Custom InputTypes
  /**
   * ExamsCountOutputType without action
   */
  export type ExamsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamsCountOutputType
     */
    select?: ExamsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamsCountOutputType without action
   */
  export type ExamsCountOutputTypeCountResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
    class: number | null
    salary: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    roleId: number | null
    class: number | null
    salary: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    roleId: number | null
    fname: string | null
    lname: string | null
    email: string | null
    dob: Date | null
    class: number | null
    grno: string | null
    contact: string | null
    salary: number | null
    joiningDate: Date | null
    addr: string | null
    password: string | null
    activationCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    roleId: number | null
    fname: string | null
    lname: string | null
    email: string | null
    dob: Date | null
    class: number | null
    grno: string | null
    contact: string | null
    salary: number | null
    joiningDate: Date | null
    addr: string | null
    password: string | null
    activationCode: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    roleId: number
    fname: number
    lname: number
    email: number
    dob: number
    class: number
    grno: number
    contact: number
    salary: number
    joiningDate: number
    addr: number
    password: number
    activationCode: number
    isActive: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    roleId?: true
    class?: true
    salary?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    roleId?: true
    class?: true
    salary?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    roleId?: true
    fname?: true
    lname?: true
    email?: true
    dob?: true
    class?: true
    grno?: true
    contact?: true
    salary?: true
    joiningDate?: true
    addr?: true
    password?: true
    activationCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    roleId?: true
    fname?: true
    lname?: true
    email?: true
    dob?: true
    class?: true
    grno?: true
    contact?: true
    salary?: true
    joiningDate?: true
    addr?: true
    password?: true
    activationCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    roleId?: true
    fname?: true
    lname?: true
    email?: true
    dob?: true
    class?: true
    grno?: true
    contact?: true
    salary?: true
    joiningDate?: true
    addr?: true
    password?: true
    activationCode?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationAndSearchRelevanceInput | usersOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date
    class: number
    grno: string | null
    contact: string
    salary: number | null
    joiningDate: Date
    addr: string | null
    password: string | null
    activationCode: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    dob?: boolean
    class?: boolean
    grno?: boolean
    contact?: boolean
    salary?: boolean
    joiningDate?: boolean
    addr?: boolean
    password?: boolean
    activationCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    subTeacher?: boolean | users$subTeacherArgs<ExtArgs>
    attendance?: boolean | users$attendanceArgs<ExtArgs>
    result?: boolean | users$resultArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    roleId?: boolean
    fname?: boolean
    lname?: boolean
    email?: boolean
    dob?: boolean
    class?: boolean
    grno?: boolean
    contact?: boolean
    salary?: boolean
    joiningDate?: boolean
    addr?: boolean
    password?: boolean
    activationCode?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subTeacher?: boolean | users$subTeacherArgs<ExtArgs>
    attendance?: boolean | users$attendanceArgs<ExtArgs>
    result?: boolean | users$resultArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      subTeacher: Prisma.$subTeacherPayload<ExtArgs>[]
      attendance: Prisma.$attendancePayload<ExtArgs>[]
      result: Prisma.$resultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roleId: number
      fname: string
      lname: string
      email: string
      dob: Date
      class: number
      grno: string | null
      contact: string
      salary: number | null
      joiningDate: Date
      addr: string | null
      password: string | null
      activationCode: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subTeacher<T extends users$subTeacherArgs<ExtArgs> = {}>(args?: Subset<T, users$subTeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findMany'> | Null>;

    attendance<T extends users$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, users$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findMany'> | Null>;

    result<T extends users$resultArgs<ExtArgs> = {}>(args?: Subset<T, users$resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly roleId: FieldRef<"users", 'Int'>
    readonly fname: FieldRef<"users", 'String'>
    readonly lname: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly dob: FieldRef<"users", 'DateTime'>
    readonly class: FieldRef<"users", 'Int'>
    readonly grno: FieldRef<"users", 'String'>
    readonly contact: FieldRef<"users", 'String'>
    readonly salary: FieldRef<"users", 'Int'>
    readonly joiningDate: FieldRef<"users", 'DateTime'>
    readonly addr: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly activationCode: FieldRef<"users", 'String'>
    readonly isActive: FieldRef<"users", 'Boolean'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
    readonly isDelete: FieldRef<"users", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationAndSearchRelevanceInput | usersOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationAndSearchRelevanceInput | usersOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationAndSearchRelevanceInput | usersOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.subTeacher
   */
  export type users$subTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    where?: subTeacherWhereInput
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: subTeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubTeacherScalarFieldEnum | SubTeacherScalarFieldEnum[]
  }

  /**
   * users.attendance
   */
  export type users$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithRelationAndSearchRelevanceInput | attendanceOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: attendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * users.result
   */
  export type users$resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    where?: resultWhereInput
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: resultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    role: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationAndSearchRelevanceInput | roleOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    role: string
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }, ExtArgs["result"]["role"]>

  export type roleSelectScalar = {
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }



  export type $rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: string
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<roleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends roleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends roleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends roleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends roleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, roleCreateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {roleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends roleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends roleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, roleDeleteArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends roleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends roleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends roleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends roleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpsertArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the role model
   */ 
  interface roleFieldRefs {
    readonly id: FieldRef<"role", 'Int'>
    readonly role: FieldRef<"role", 'String'>
    readonly createdAt: FieldRef<"role", 'DateTime'>
    readonly updatedAt: FieldRef<"role", 'DateTime'>
    readonly isDelete: FieldRef<"role", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationAndSearchRelevanceInput | roleOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationAndSearchRelevanceInput | roleOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationAndSearchRelevanceInput | roleOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }

  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
  }

  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }

  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
  }

  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
  }


  /**
   * Model subjects
   */

  export type AggregateSubjects = {
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  export type SubjectsAvgAggregateOutputType = {
    id: number | null
    class: number | null
  }

  export type SubjectsSumAggregateOutputType = {
    id: number | null
    class: number | null
  }

  export type SubjectsMinAggregateOutputType = {
    id: number | null
    class: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type SubjectsMaxAggregateOutputType = {
    id: number | null
    class: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type SubjectsCountAggregateOutputType = {
    id: number
    class: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type SubjectsAvgAggregateInputType = {
    id?: true
    class?: true
  }

  export type SubjectsSumAggregateInputType = {
    id?: true
    class?: true
  }

  export type SubjectsMinAggregateInputType = {
    id?: true
    class?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type SubjectsMaxAggregateInputType = {
    id?: true
    class?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type SubjectsCountAggregateInputType = {
    id?: true
    class?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type SubjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subjects to aggregate.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationAndSearchRelevanceInput | subjectsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subjects
    **/
    _count?: true | SubjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectsMaxAggregateInputType
  }

  export type GetSubjectsAggregateType<T extends SubjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjects[P]>
      : GetScalarType<T[P], AggregateSubjects[P]>
  }




  export type subjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subjectsWhereInput
    orderBy?: subjectsOrderByWithAggregationInput | subjectsOrderByWithAggregationInput[]
    by: SubjectsScalarFieldEnum[] | SubjectsScalarFieldEnum
    having?: subjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectsCountAggregateInputType | true
    _avg?: SubjectsAvgAggregateInputType
    _sum?: SubjectsSumAggregateInputType
    _min?: SubjectsMinAggregateInputType
    _max?: SubjectsMaxAggregateInputType
  }

  export type SubjectsGroupByOutputType = {
    id: number
    class: number
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  type GetSubjectsGroupByPayload<T extends subjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
        }
      >
    >


  export type subjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    subTeacher?: boolean | subjects$subTeacherArgs<ExtArgs>
    result?: boolean | subjects$resultArgs<ExtArgs>
    _count?: boolean | SubjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjects"]>

  export type subjectsSelectScalar = {
    id?: boolean
    class?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type subjectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subTeacher?: boolean | subjects$subTeacherArgs<ExtArgs>
    result?: boolean | subjects$resultArgs<ExtArgs>
    _count?: boolean | SubjectsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $subjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "subjects"
    objects: {
      subTeacher: Prisma.$subTeacherPayload<ExtArgs>[]
      result: Prisma.$resultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class: number
      name: string
      description: string
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["subjects"]>
    composites: {}
  }


  type subjectsGetPayload<S extends boolean | null | undefined | subjectsDefaultArgs> = $Result.GetResult<Prisma.$subjectsPayload, S>

  type subjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<subjectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectsCountAggregateInputType | true
    }

  export interface subjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subjects'], meta: { name: 'subjects' } }
    /**
     * Find zero or one Subjects that matches the filter.
     * @param {subjectsFindUniqueArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subjectsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsFindUniqueArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subjects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {subjectsFindUniqueOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subjectsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindFirstArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subjectsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsFindFirstArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subjects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindFirstOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subjectsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subjects.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subjects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectsWithIdOnly = await prisma.subjects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends subjectsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subjects.
     * @param {subjectsCreateArgs} args - Arguments to create a Subjects.
     * @example
     * // Create one Subjects
     * const Subjects = await prisma.subjects.create({
     *   data: {
     *     // ... data to create a Subjects
     *   }
     * })
     * 
    **/
    create<T extends subjectsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsCreateArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subjects.
     * @param {subjectsCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subjects = await prisma.subjects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends subjectsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subjects.
     * @param {subjectsDeleteArgs} args - Arguments to delete one Subjects.
     * @example
     * // Delete one Subjects
     * const Subjects = await prisma.subjects.delete({
     *   where: {
     *     // ... filter to delete one Subjects
     *   }
     * })
     * 
    **/
    delete<T extends subjectsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsDeleteArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subjects.
     * @param {subjectsUpdateArgs} args - Arguments to update one Subjects.
     * @example
     * // Update one Subjects
     * const subjects = await prisma.subjects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subjectsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsUpdateArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {subjectsDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subjects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subjectsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subjectsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subjects = await prisma.subjects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subjectsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subjects.
     * @param {subjectsUpsertArgs} args - Arguments to update or create a Subjects.
     * @example
     * // Update or create a Subjects
     * const subjects = await prisma.subjects.upsert({
     *   create: {
     *     // ... data to create a Subjects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subjects we want to update
     *   }
     * })
    **/
    upsert<T extends subjectsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, subjectsUpsertArgs<ExtArgs>>
    ): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subjects.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends subjectsCountArgs>(
      args?: Subset<T, subjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectsAggregateArgs>(args: Subset<T, SubjectsAggregateArgs>): Prisma.PrismaPromise<GetSubjectsAggregateType<T>>

    /**
     * Group by Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subjectsGroupByArgs['orderBy'] }
        : { orderBy?: subjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subjects model
   */
  readonly fields: subjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subjects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__subjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subTeacher<T extends subjects$subTeacherArgs<ExtArgs> = {}>(args?: Subset<T, subjects$subTeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findMany'> | Null>;

    result<T extends subjects$resultArgs<ExtArgs> = {}>(args?: Subset<T, subjects$resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the subjects model
   */ 
  interface subjectsFieldRefs {
    readonly id: FieldRef<"subjects", 'Int'>
    readonly class: FieldRef<"subjects", 'Int'>
    readonly name: FieldRef<"subjects", 'String'>
    readonly description: FieldRef<"subjects", 'String'>
    readonly createdAt: FieldRef<"subjects", 'DateTime'>
    readonly updatedAt: FieldRef<"subjects", 'DateTime'>
    readonly isDelete: FieldRef<"subjects", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * subjects findUnique
   */
  export type subjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects findUniqueOrThrow
   */
  export type subjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects findFirst
   */
  export type subjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationAndSearchRelevanceInput | subjectsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subjects.
     */
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects findFirstOrThrow
   */
  export type subjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationAndSearchRelevanceInput | subjectsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subjects.
     */
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects findMany
   */
  export type subjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationAndSearchRelevanceInput | subjectsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects create
   */
  export type subjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The data needed to create a subjects.
     */
    data: XOR<subjectsCreateInput, subjectsUncheckedCreateInput>
  }

  /**
   * subjects createMany
   */
  export type subjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subjects.
     */
    data: subjectsCreateManyInput | subjectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subjects update
   */
  export type subjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The data needed to update a subjects.
     */
    data: XOR<subjectsUpdateInput, subjectsUncheckedUpdateInput>
    /**
     * Choose, which subjects to update.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects updateMany
   */
  export type subjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subjects.
     */
    data: XOR<subjectsUpdateManyMutationInput, subjectsUncheckedUpdateManyInput>
    /**
     * Filter which subjects to update
     */
    where?: subjectsWhereInput
  }

  /**
   * subjects upsert
   */
  export type subjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The filter to search for the subjects to update in case it exists.
     */
    where: subjectsWhereUniqueInput
    /**
     * In case the subjects found by the `where` argument doesn't exist, create a new subjects with this data.
     */
    create: XOR<subjectsCreateInput, subjectsUncheckedCreateInput>
    /**
     * In case the subjects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subjectsUpdateInput, subjectsUncheckedUpdateInput>
  }

  /**
   * subjects delete
   */
  export type subjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter which subjects to delete.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects deleteMany
   */
  export type subjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subjects to delete
     */
    where?: subjectsWhereInput
  }

  /**
   * subjects.subTeacher
   */
  export type subjects$subTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    where?: subTeacherWhereInput
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: subTeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubTeacherScalarFieldEnum | SubTeacherScalarFieldEnum[]
  }

  /**
   * subjects.result
   */
  export type subjects$resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    where?: resultWhereInput
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: resultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * subjects without action
   */
  export type subjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
  }


  /**
   * Model subTeacher
   */

  export type AggregateSubTeacher = {
    _count: SubTeacherCountAggregateOutputType | null
    _avg: SubTeacherAvgAggregateOutputType | null
    _sum: SubTeacherSumAggregateOutputType | null
    _min: SubTeacherMinAggregateOutputType | null
    _max: SubTeacherMaxAggregateOutputType | null
  }

  export type SubTeacherAvgAggregateOutputType = {
    subId: number | null
    teacherId: number | null
  }

  export type SubTeacherSumAggregateOutputType = {
    subId: number | null
    teacherId: number | null
  }

  export type SubTeacherMinAggregateOutputType = {
    subId: number | null
    teacherId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type SubTeacherMaxAggregateOutputType = {
    subId: number | null
    teacherId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type SubTeacherCountAggregateOutputType = {
    subId: number
    teacherId: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type SubTeacherAvgAggregateInputType = {
    subId?: true
    teacherId?: true
  }

  export type SubTeacherSumAggregateInputType = {
    subId?: true
    teacherId?: true
  }

  export type SubTeacherMinAggregateInputType = {
    subId?: true
    teacherId?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type SubTeacherMaxAggregateInputType = {
    subId?: true
    teacherId?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type SubTeacherCountAggregateInputType = {
    subId?: true
    teacherId?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type SubTeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subTeacher to aggregate.
     */
    where?: subTeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subTeachers to fetch.
     */
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subTeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subTeachers
    **/
    _count?: true | SubTeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubTeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubTeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubTeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubTeacherMaxAggregateInputType
  }

  export type GetSubTeacherAggregateType<T extends SubTeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateSubTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubTeacher[P]>
      : GetScalarType<T[P], AggregateSubTeacher[P]>
  }




  export type subTeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subTeacherWhereInput
    orderBy?: subTeacherOrderByWithAggregationInput | subTeacherOrderByWithAggregationInput[]
    by: SubTeacherScalarFieldEnum[] | SubTeacherScalarFieldEnum
    having?: subTeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubTeacherCountAggregateInputType | true
    _avg?: SubTeacherAvgAggregateInputType
    _sum?: SubTeacherSumAggregateInputType
    _min?: SubTeacherMinAggregateInputType
    _max?: SubTeacherMaxAggregateInputType
  }

  export type SubTeacherGroupByOutputType = {
    subId: number
    teacherId: number
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: SubTeacherCountAggregateOutputType | null
    _avg: SubTeacherAvgAggregateOutputType | null
    _sum: SubTeacherSumAggregateOutputType | null
    _min: SubTeacherMinAggregateOutputType | null
    _max: SubTeacherMaxAggregateOutputType | null
  }

  type GetSubTeacherGroupByPayload<T extends subTeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubTeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubTeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubTeacherGroupByOutputType[P]>
            : GetScalarType<T[P], SubTeacherGroupByOutputType[P]>
        }
      >
    >


  export type subTeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    subId?: boolean
    teacherId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    subjects?: boolean | subjectsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subTeacher"]>

  export type subTeacherSelectScalar = {
    subId?: boolean
    teacherId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type subTeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | subjectsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $subTeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "subTeacher"
    objects: {
      subjects: Prisma.$subjectsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      subId: number
      teacherId: number
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["subTeacher"]>
    composites: {}
  }


  type subTeacherGetPayload<S extends boolean | null | undefined | subTeacherDefaultArgs> = $Result.GetResult<Prisma.$subTeacherPayload, S>

  type subTeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<subTeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubTeacherCountAggregateInputType | true
    }

  export interface subTeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subTeacher'], meta: { name: 'subTeacher' } }
    /**
     * Find zero or one SubTeacher that matches the filter.
     * @param {subTeacherFindUniqueArgs} args - Arguments to find a SubTeacher
     * @example
     * // Get one SubTeacher
     * const subTeacher = await prisma.subTeacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subTeacherFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherFindUniqueArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubTeacher that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {subTeacherFindUniqueOrThrowArgs} args - Arguments to find a SubTeacher
     * @example
     * // Get one SubTeacher
     * const subTeacher = await prisma.subTeacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subTeacherFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubTeacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherFindFirstArgs} args - Arguments to find a SubTeacher
     * @example
     * // Get one SubTeacher
     * const subTeacher = await prisma.subTeacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subTeacherFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherFindFirstArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubTeacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherFindFirstOrThrowArgs} args - Arguments to find a SubTeacher
     * @example
     * // Get one SubTeacher
     * const subTeacher = await prisma.subTeacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subTeacherFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubTeachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubTeachers
     * const subTeachers = await prisma.subTeacher.findMany()
     * 
     * // Get first 10 SubTeachers
     * const subTeachers = await prisma.subTeacher.findMany({ take: 10 })
     * 
     * // Only select the `subId`
     * const subTeacherWithSubIdOnly = await prisma.subTeacher.findMany({ select: { subId: true } })
     * 
    **/
    findMany<T extends subTeacherFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubTeacher.
     * @param {subTeacherCreateArgs} args - Arguments to create a SubTeacher.
     * @example
     * // Create one SubTeacher
     * const SubTeacher = await prisma.subTeacher.create({
     *   data: {
     *     // ... data to create a SubTeacher
     *   }
     * })
     * 
    **/
    create<T extends subTeacherCreateArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherCreateArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubTeachers.
     * @param {subTeacherCreateManyArgs} args - Arguments to create many SubTeachers.
     * @example
     * // Create many SubTeachers
     * const subTeacher = await prisma.subTeacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends subTeacherCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubTeacher.
     * @param {subTeacherDeleteArgs} args - Arguments to delete one SubTeacher.
     * @example
     * // Delete one SubTeacher
     * const SubTeacher = await prisma.subTeacher.delete({
     *   where: {
     *     // ... filter to delete one SubTeacher
     *   }
     * })
     * 
    **/
    delete<T extends subTeacherDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherDeleteArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubTeacher.
     * @param {subTeacherUpdateArgs} args - Arguments to update one SubTeacher.
     * @example
     * // Update one SubTeacher
     * const subTeacher = await prisma.subTeacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subTeacherUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherUpdateArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubTeachers.
     * @param {subTeacherDeleteManyArgs} args - Arguments to filter SubTeachers to delete.
     * @example
     * // Delete a few SubTeachers
     * const { count } = await prisma.subTeacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subTeacherDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, subTeacherDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubTeachers
     * const subTeacher = await prisma.subTeacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subTeacherUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubTeacher.
     * @param {subTeacherUpsertArgs} args - Arguments to update or create a SubTeacher.
     * @example
     * // Update or create a SubTeacher
     * const subTeacher = await prisma.subTeacher.upsert({
     *   create: {
     *     // ... data to create a SubTeacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubTeacher we want to update
     *   }
     * })
    **/
    upsert<T extends subTeacherUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, subTeacherUpsertArgs<ExtArgs>>
    ): Prisma__subTeacherClient<$Result.GetResult<Prisma.$subTeacherPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherCountArgs} args - Arguments to filter SubTeachers to count.
     * @example
     * // Count the number of SubTeachers
     * const count = await prisma.subTeacher.count({
     *   where: {
     *     // ... the filter for the SubTeachers we want to count
     *   }
     * })
    **/
    count<T extends subTeacherCountArgs>(
      args?: Subset<T, subTeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubTeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubTeacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubTeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubTeacherAggregateArgs>(args: Subset<T, SubTeacherAggregateArgs>): Prisma.PrismaPromise<GetSubTeacherAggregateType<T>>

    /**
     * Group by SubTeacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subTeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subTeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subTeacherGroupByArgs['orderBy'] }
        : { orderBy?: subTeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subTeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subTeacher model
   */
  readonly fields: subTeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subTeacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__subTeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subjects<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the subTeacher model
   */ 
  interface subTeacherFieldRefs {
    readonly subId: FieldRef<"subTeacher", 'Int'>
    readonly teacherId: FieldRef<"subTeacher", 'Int'>
    readonly createdAt: FieldRef<"subTeacher", 'DateTime'>
    readonly updatedAt: FieldRef<"subTeacher", 'DateTime'>
    readonly isDelete: FieldRef<"subTeacher", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * subTeacher findUnique
   */
  export type subTeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter, which subTeacher to fetch.
     */
    where: subTeacherWhereUniqueInput
  }

  /**
   * subTeacher findUniqueOrThrow
   */
  export type subTeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter, which subTeacher to fetch.
     */
    where: subTeacherWhereUniqueInput
  }

  /**
   * subTeacher findFirst
   */
  export type subTeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter, which subTeacher to fetch.
     */
    where?: subTeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subTeachers to fetch.
     */
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subTeachers.
     */
    cursor?: subTeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subTeachers.
     */
    distinct?: SubTeacherScalarFieldEnum | SubTeacherScalarFieldEnum[]
  }

  /**
   * subTeacher findFirstOrThrow
   */
  export type subTeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter, which subTeacher to fetch.
     */
    where?: subTeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subTeachers to fetch.
     */
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subTeachers.
     */
    cursor?: subTeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subTeachers.
     */
    distinct?: SubTeacherScalarFieldEnum | SubTeacherScalarFieldEnum[]
  }

  /**
   * subTeacher findMany
   */
  export type subTeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter, which subTeachers to fetch.
     */
    where?: subTeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subTeachers to fetch.
     */
    orderBy?: subTeacherOrderByWithRelationAndSearchRelevanceInput | subTeacherOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subTeachers.
     */
    cursor?: subTeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subTeachers.
     */
    skip?: number
    distinct?: SubTeacherScalarFieldEnum | SubTeacherScalarFieldEnum[]
  }

  /**
   * subTeacher create
   */
  export type subTeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a subTeacher.
     */
    data: XOR<subTeacherCreateInput, subTeacherUncheckedCreateInput>
  }

  /**
   * subTeacher createMany
   */
  export type subTeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subTeachers.
     */
    data: subTeacherCreateManyInput | subTeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subTeacher update
   */
  export type subTeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a subTeacher.
     */
    data: XOR<subTeacherUpdateInput, subTeacherUncheckedUpdateInput>
    /**
     * Choose, which subTeacher to update.
     */
    where: subTeacherWhereUniqueInput
  }

  /**
   * subTeacher updateMany
   */
  export type subTeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subTeachers.
     */
    data: XOR<subTeacherUpdateManyMutationInput, subTeacherUncheckedUpdateManyInput>
    /**
     * Filter which subTeachers to update
     */
    where?: subTeacherWhereInput
  }

  /**
   * subTeacher upsert
   */
  export type subTeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the subTeacher to update in case it exists.
     */
    where: subTeacherWhereUniqueInput
    /**
     * In case the subTeacher found by the `where` argument doesn't exist, create a new subTeacher with this data.
     */
    create: XOR<subTeacherCreateInput, subTeacherUncheckedCreateInput>
    /**
     * In case the subTeacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subTeacherUpdateInput, subTeacherUncheckedUpdateInput>
  }

  /**
   * subTeacher delete
   */
  export type subTeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
    /**
     * Filter which subTeacher to delete.
     */
    where: subTeacherWhereUniqueInput
  }

  /**
   * subTeacher deleteMany
   */
  export type subTeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subTeachers to delete
     */
    where?: subTeacherWhereInput
  }

  /**
   * subTeacher without action
   */
  export type subTeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subTeacher
     */
    select?: subTeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subTeacherInclude<ExtArgs> | null
  }


  /**
   * Model attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    stdId: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    stdId: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    stdId: number | null
    attDate: Date | null
    present: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    stdId: number | null
    attDate: Date | null
    present: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    stdId: number
    attDate: number
    present: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    stdId?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    stdId?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    stdId?: true
    attDate?: true
    present?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    stdId?: true
    attDate?: true
    present?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    stdId?: true
    attDate?: true
    present?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendance to aggregate.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationAndSearchRelevanceInput | attendanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type attendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithAggregationInput | attendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: attendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    stdId: number
    attDate: Date
    present: boolean
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type attendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stdId?: boolean
    attDate?: boolean
    present?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type attendanceSelectScalar = {
    id?: boolean
    stdId?: boolean
    attDate?: boolean
    present?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type attendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
  }


  export type $attendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attendance"
    objects: {
      student: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stdId: number
      attDate: Date
      present: boolean
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }


  type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = $Result.GetResult<Prisma.$attendancePayload, S>

  type attendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface attendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends attendanceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends attendanceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends attendanceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Attendance.
     * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
    **/
    create<T extends attendanceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceCreateArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Attendances.
     * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends attendanceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance.
     * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
    **/
    delete<T extends attendanceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceDeleteArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Attendance.
     * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends attendanceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceUpdateArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Attendances.
     * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends attendanceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends attendanceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
    **/
    upsert<T extends attendanceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, attendanceUpsertArgs<ExtArgs>>
    ): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends attendanceCountArgs>(
      args?: Subset<T, attendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attendanceGroupByArgs['orderBy'] }
        : { orderBy?: attendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attendance model
   */
  readonly fields: attendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the attendance model
   */ 
  interface attendanceFieldRefs {
    readonly id: FieldRef<"attendance", 'Int'>
    readonly stdId: FieldRef<"attendance", 'Int'>
    readonly attDate: FieldRef<"attendance", 'DateTime'>
    readonly present: FieldRef<"attendance", 'Boolean'>
    readonly createdAt: FieldRef<"attendance", 'DateTime'>
    readonly updatedAt: FieldRef<"attendance", 'DateTime'>
    readonly isDelete: FieldRef<"attendance", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * attendance findUnique
   */
  export type attendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findUniqueOrThrow
   */
  export type attendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findFirst
   */
  export type attendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationAndSearchRelevanceInput | attendanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findFirstOrThrow
   */
  export type attendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationAndSearchRelevanceInput | attendanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findMany
   */
  export type attendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendances to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationAndSearchRelevanceInput | attendanceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance create
   */
  export type attendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a attendance.
     */
    data: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
  }

  /**
   * attendance createMany
   */
  export type attendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attendances.
     */
    data: attendanceCreateManyInput | attendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * attendance update
   */
  export type attendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a attendance.
     */
    data: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
    /**
     * Choose, which attendance to update.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance updateMany
   */
  export type attendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attendances.
     */
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyInput>
    /**
     * Filter which attendances to update
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance upsert
   */
  export type attendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the attendance to update in case it exists.
     */
    where: attendanceWhereUniqueInput
    /**
     * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
     */
    create: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
    /**
     * In case the attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
  }

  /**
   * attendance delete
   */
  export type attendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter which attendance to delete.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance deleteMany
   */
  export type attendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendances to delete
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance without action
   */
  export type attendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
  }


  /**
   * Model exams
   */

  export type AggregateExams = {
    _count: ExamsCountAggregateOutputType | null
    _avg: ExamsAvgAggregateOutputType | null
    _sum: ExamsSumAggregateOutputType | null
    _min: ExamsMinAggregateOutputType | null
    _max: ExamsMaxAggregateOutputType | null
  }

  export type ExamsAvgAggregateOutputType = {
    id: number | null
    totalMarks: number | null
  }

  export type ExamsSumAggregateOutputType = {
    id: number | null
    totalMarks: number | null
  }

  export type ExamsMinAggregateOutputType = {
    id: number | null
    examName: string | null
    examDate: Date | null
    totalMarks: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type ExamsMaxAggregateOutputType = {
    id: number | null
    examName: string | null
    examDate: Date | null
    totalMarks: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type ExamsCountAggregateOutputType = {
    id: number
    examName: number
    examDate: number
    totalMarks: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type ExamsAvgAggregateInputType = {
    id?: true
    totalMarks?: true
  }

  export type ExamsSumAggregateInputType = {
    id?: true
    totalMarks?: true
  }

  export type ExamsMinAggregateInputType = {
    id?: true
    examName?: true
    examDate?: true
    totalMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type ExamsMaxAggregateInputType = {
    id?: true
    examName?: true
    examDate?: true
    totalMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type ExamsCountAggregateInputType = {
    id?: true
    examName?: true
    examDate?: true
    totalMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type ExamsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exams to aggregate.
     */
    where?: examsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examsOrderByWithRelationAndSearchRelevanceInput | examsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: examsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exams
    **/
    _count?: true | ExamsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamsMaxAggregateInputType
  }

  export type GetExamsAggregateType<T extends ExamsAggregateArgs> = {
        [P in keyof T & keyof AggregateExams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExams[P]>
      : GetScalarType<T[P], AggregateExams[P]>
  }




  export type examsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: examsWhereInput
    orderBy?: examsOrderByWithAggregationInput | examsOrderByWithAggregationInput[]
    by: ExamsScalarFieldEnum[] | ExamsScalarFieldEnum
    having?: examsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamsCountAggregateInputType | true
    _avg?: ExamsAvgAggregateInputType
    _sum?: ExamsSumAggregateInputType
    _min?: ExamsMinAggregateInputType
    _max?: ExamsMaxAggregateInputType
  }

  export type ExamsGroupByOutputType = {
    id: number
    examName: string
    examDate: Date
    totalMarks: number
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: ExamsCountAggregateOutputType | null
    _avg: ExamsAvgAggregateOutputType | null
    _sum: ExamsSumAggregateOutputType | null
    _min: ExamsMinAggregateOutputType | null
    _max: ExamsMaxAggregateOutputType | null
  }

  type GetExamsGroupByPayload<T extends examsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamsGroupByOutputType[P]>
            : GetScalarType<T[P], ExamsGroupByOutputType[P]>
        }
      >
    >


  export type examsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examName?: boolean
    examDate?: boolean
    totalMarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    result?: boolean | exams$resultArgs<ExtArgs>
    _count?: boolean | ExamsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exams"]>

  export type examsSelectScalar = {
    id?: boolean
    examName?: boolean
    examDate?: boolean
    totalMarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type examsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | exams$resultArgs<ExtArgs>
    _count?: boolean | ExamsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $examsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exams"
    objects: {
      result: Prisma.$resultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examName: string
      examDate: Date
      totalMarks: number
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["exams"]>
    composites: {}
  }


  type examsGetPayload<S extends boolean | null | undefined | examsDefaultArgs> = $Result.GetResult<Prisma.$examsPayload, S>

  type examsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<examsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExamsCountAggregateInputType | true
    }

  export interface examsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exams'], meta: { name: 'exams' } }
    /**
     * Find zero or one Exams that matches the filter.
     * @param {examsFindUniqueArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends examsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, examsFindUniqueArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exams that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {examsFindUniqueOrThrowArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends examsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, examsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsFindFirstArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends examsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, examsFindFirstArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsFindFirstOrThrowArgs} args - Arguments to find a Exams
     * @example
     * // Get one Exams
     * const exams = await prisma.exams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends examsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, examsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exams.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exams.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examsWithIdOnly = await prisma.exams.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends examsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exams.
     * @param {examsCreateArgs} args - Arguments to create a Exams.
     * @example
     * // Create one Exams
     * const Exams = await prisma.exams.create({
     *   data: {
     *     // ... data to create a Exams
     *   }
     * })
     * 
    **/
    create<T extends examsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, examsCreateArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exams.
     * @param {examsCreateManyArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exams = await prisma.exams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends examsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exams.
     * @param {examsDeleteArgs} args - Arguments to delete one Exams.
     * @example
     * // Delete one Exams
     * const Exams = await prisma.exams.delete({
     *   where: {
     *     // ... filter to delete one Exams
     *   }
     * })
     * 
    **/
    delete<T extends examsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, examsDeleteArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exams.
     * @param {examsUpdateArgs} args - Arguments to update one Exams.
     * @example
     * // Update one Exams
     * const exams = await prisma.exams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends examsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, examsUpdateArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exams.
     * @param {examsDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends examsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exams = await prisma.exams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends examsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, examsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exams.
     * @param {examsUpsertArgs} args - Arguments to update or create a Exams.
     * @example
     * // Update or create a Exams
     * const exams = await prisma.exams.upsert({
     *   create: {
     *     // ... data to create a Exams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exams we want to update
     *   }
     * })
    **/
    upsert<T extends examsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, examsUpsertArgs<ExtArgs>>
    ): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exams.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends examsCountArgs>(
      args?: Subset<T, examsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamsAggregateArgs>(args: Subset<T, ExamsAggregateArgs>): Prisma.PrismaPromise<GetExamsAggregateType<T>>

    /**
     * Group by Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends examsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: examsGroupByArgs['orderBy'] }
        : { orderBy?: examsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, examsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exams model
   */
  readonly fields: examsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__examsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    result<T extends exams$resultArgs<ExtArgs> = {}>(args?: Subset<T, exams$resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the exams model
   */ 
  interface examsFieldRefs {
    readonly id: FieldRef<"exams", 'Int'>
    readonly examName: FieldRef<"exams", 'String'>
    readonly examDate: FieldRef<"exams", 'DateTime'>
    readonly totalMarks: FieldRef<"exams", 'Int'>
    readonly createdAt: FieldRef<"exams", 'DateTime'>
    readonly updatedAt: FieldRef<"exams", 'DateTime'>
    readonly isDelete: FieldRef<"exams", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * exams findUnique
   */
  export type examsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where: examsWhereUniqueInput
  }

  /**
   * exams findUniqueOrThrow
   */
  export type examsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where: examsWhereUniqueInput
  }

  /**
   * exams findFirst
   */
  export type examsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where?: examsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examsOrderByWithRelationAndSearchRelevanceInput | examsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exams.
     */
    cursor?: examsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exams.
     */
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * exams findFirstOrThrow
   */
  export type examsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where?: examsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examsOrderByWithRelationAndSearchRelevanceInput | examsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exams.
     */
    cursor?: examsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exams.
     */
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * exams findMany
   */
  export type examsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where?: examsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examsOrderByWithRelationAndSearchRelevanceInput | examsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exams.
     */
    cursor?: examsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    distinct?: ExamsScalarFieldEnum | ExamsScalarFieldEnum[]
  }

  /**
   * exams create
   */
  export type examsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * The data needed to create a exams.
     */
    data: XOR<examsCreateInput, examsUncheckedCreateInput>
  }

  /**
   * exams createMany
   */
  export type examsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exams.
     */
    data: examsCreateManyInput | examsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exams update
   */
  export type examsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * The data needed to update a exams.
     */
    data: XOR<examsUpdateInput, examsUncheckedUpdateInput>
    /**
     * Choose, which exams to update.
     */
    where: examsWhereUniqueInput
  }

  /**
   * exams updateMany
   */
  export type examsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exams.
     */
    data: XOR<examsUpdateManyMutationInput, examsUncheckedUpdateManyInput>
    /**
     * Filter which exams to update
     */
    where?: examsWhereInput
  }

  /**
   * exams upsert
   */
  export type examsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * The filter to search for the exams to update in case it exists.
     */
    where: examsWhereUniqueInput
    /**
     * In case the exams found by the `where` argument doesn't exist, create a new exams with this data.
     */
    create: XOR<examsCreateInput, examsUncheckedCreateInput>
    /**
     * In case the exams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<examsUpdateInput, examsUncheckedUpdateInput>
  }

  /**
   * exams delete
   */
  export type examsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
    /**
     * Filter which exams to delete.
     */
    where: examsWhereUniqueInput
  }

  /**
   * exams deleteMany
   */
  export type examsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exams to delete
     */
    where?: examsWhereInput
  }

  /**
   * exams.result
   */
  export type exams$resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    where?: resultWhereInput
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: resultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * exams without action
   */
  export type examsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exams
     */
    select?: examsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: examsInclude<ExtArgs> | null
  }


  /**
   * Model result
   */

  export type AggregateResult = {
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  export type ResultAvgAggregateOutputType = {
    stdId: number | null
    subId: number | null
    examId: number | null
    obtainedMarks: number | null
  }

  export type ResultSumAggregateOutputType = {
    stdId: number | null
    subId: number | null
    examId: number | null
    obtainedMarks: number | null
  }

  export type ResultMinAggregateOutputType = {
    stdId: number | null
    subId: number | null
    examId: number | null
    examdate: Date | null
    obtainedMarks: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type ResultMaxAggregateOutputType = {
    stdId: number | null
    subId: number | null
    examId: number | null
    examdate: Date | null
    obtainedMarks: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type ResultCountAggregateOutputType = {
    stdId: number
    subId: number
    examId: number
    examdate: number
    obtainedMarks: number
    createdAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type ResultAvgAggregateInputType = {
    stdId?: true
    subId?: true
    examId?: true
    obtainedMarks?: true
  }

  export type ResultSumAggregateInputType = {
    stdId?: true
    subId?: true
    examId?: true
    obtainedMarks?: true
  }

  export type ResultMinAggregateInputType = {
    stdId?: true
    subId?: true
    examId?: true
    examdate?: true
    obtainedMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type ResultMaxAggregateInputType = {
    stdId?: true
    subId?: true
    examId?: true
    examdate?: true
    obtainedMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type ResultCountAggregateInputType = {
    stdId?: true
    subId?: true
    examId?: true
    examdate?: true
    obtainedMarks?: true
    createdAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type ResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which result to aggregate.
     */
    where?: resultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of results to fetch.
     */
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: resultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned results
    **/
    _count?: true | ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultMaxAggregateInputType
  }

  export type GetResultAggregateType<T extends ResultAggregateArgs> = {
        [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResult[P]>
      : GetScalarType<T[P], AggregateResult[P]>
  }




  export type resultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultWhereInput
    orderBy?: resultOrderByWithAggregationInput | resultOrderByWithAggregationInput[]
    by: ResultScalarFieldEnum[] | ResultScalarFieldEnum
    having?: resultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultCountAggregateInputType | true
    _avg?: ResultAvgAggregateInputType
    _sum?: ResultSumAggregateInputType
    _min?: ResultMinAggregateInputType
    _max?: ResultMaxAggregateInputType
  }

  export type ResultGroupByOutputType = {
    stdId: number
    subId: number
    examId: number
    examdate: Date
    obtainedMarks: number
    createdAt: Date
    updatedAt: Date
    isDelete: boolean
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  type GetResultGroupByPayload<T extends resultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultGroupByOutputType[P]>
            : GetScalarType<T[P], ResultGroupByOutputType[P]>
        }
      >
    >


  export type resultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stdId?: boolean
    subId?: boolean
    examId?: boolean
    examdate?: boolean
    obtainedMarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subjects?: boolean | subjectsDefaultArgs<ExtArgs>
    exams?: boolean | examsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type resultSelectScalar = {
    stdId?: boolean
    subId?: boolean
    examId?: boolean
    examdate?: boolean
    obtainedMarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }


  export type resultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subjects?: boolean | subjectsDefaultArgs<ExtArgs>
    exams?: boolean | examsDefaultArgs<ExtArgs>
  }


  export type $resultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "result"
    objects: {
      student: Prisma.$usersPayload<ExtArgs>
      subjects: Prisma.$subjectsPayload<ExtArgs>
      exams: Prisma.$examsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      stdId: number
      subId: number
      examId: number
      examdate: Date
      obtainedMarks: number
      createdAt: Date
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["result"]>
    composites: {}
  }


  type resultGetPayload<S extends boolean | null | undefined | resultDefaultArgs> = $Result.GetResult<Prisma.$resultPayload, S>

  type resultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<resultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResultCountAggregateInputType | true
    }

  export interface resultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['result'], meta: { name: 'result' } }
    /**
     * Find zero or one Result that matches the filter.
     * @param {resultFindUniqueArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends resultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, resultFindUniqueArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Result that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {resultFindUniqueOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends resultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, resultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultFindFirstArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends resultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, resultFindFirstArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Result that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultFindFirstOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends resultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, resultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Results
     * const results = await prisma.result.findMany()
     * 
     * // Get first 10 Results
     * const results = await prisma.result.findMany({ take: 10 })
     * 
     * // Only select the `stdId`
     * const resultWithStdIdOnly = await prisma.result.findMany({ select: { stdId: true } })
     * 
    **/
    findMany<T extends resultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Result.
     * @param {resultCreateArgs} args - Arguments to create a Result.
     * @example
     * // Create one Result
     * const Result = await prisma.result.create({
     *   data: {
     *     // ... data to create a Result
     *   }
     * })
     * 
    **/
    create<T extends resultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, resultCreateArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Results.
     * @param {resultCreateManyArgs} args - Arguments to create many Results.
     * @example
     * // Create many Results
     * const result = await prisma.result.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends resultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Result.
     * @param {resultDeleteArgs} args - Arguments to delete one Result.
     * @example
     * // Delete one Result
     * const Result = await prisma.result.delete({
     *   where: {
     *     // ... filter to delete one Result
     *   }
     * })
     * 
    **/
    delete<T extends resultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, resultDeleteArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Result.
     * @param {resultUpdateArgs} args - Arguments to update one Result.
     * @example
     * // Update one Result
     * const result = await prisma.result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends resultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, resultUpdateArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Results.
     * @param {resultDeleteManyArgs} args - Arguments to filter Results to delete.
     * @example
     * // Delete a few Results
     * const { count } = await prisma.result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends resultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends resultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, resultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Result.
     * @param {resultUpsertArgs} args - Arguments to update or create a Result.
     * @example
     * // Update or create a Result
     * const result = await prisma.result.upsert({
     *   create: {
     *     // ... data to create a Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Result we want to update
     *   }
     * })
    **/
    upsert<T extends resultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, resultUpsertArgs<ExtArgs>>
    ): Prisma__resultClient<$Result.GetResult<Prisma.$resultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultCountArgs} args - Arguments to filter Results to count.
     * @example
     * // Count the number of Results
     * const count = await prisma.result.count({
     *   where: {
     *     // ... the filter for the Results we want to count
     *   }
     * })
    **/
    count<T extends resultCountArgs>(
      args?: Subset<T, resultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultAggregateArgs>(args: Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

    /**
     * Group by Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends resultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: resultGroupByArgs['orderBy'] }
        : { orderBy?: resultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, resultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the result model
   */
  readonly fields: resultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__resultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subjects<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    exams<T extends examsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, examsDefaultArgs<ExtArgs>>): Prisma__examsClient<$Result.GetResult<Prisma.$examsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the result model
   */ 
  interface resultFieldRefs {
    readonly stdId: FieldRef<"result", 'Int'>
    readonly subId: FieldRef<"result", 'Int'>
    readonly examId: FieldRef<"result", 'Int'>
    readonly examdate: FieldRef<"result", 'DateTime'>
    readonly obtainedMarks: FieldRef<"result", 'Int'>
    readonly createdAt: FieldRef<"result", 'DateTime'>
    readonly updatedAt: FieldRef<"result", 'DateTime'>
    readonly isDelete: FieldRef<"result", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * result findUnique
   */
  export type resultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter, which result to fetch.
     */
    where: resultWhereUniqueInput
  }

  /**
   * result findUniqueOrThrow
   */
  export type resultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter, which result to fetch.
     */
    where: resultWhereUniqueInput
  }

  /**
   * result findFirst
   */
  export type resultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter, which result to fetch.
     */
    where?: resultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of results to fetch.
     */
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for results.
     */
    cursor?: resultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * result findFirstOrThrow
   */
  export type resultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter, which result to fetch.
     */
    where?: resultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of results to fetch.
     */
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for results.
     */
    cursor?: resultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * result findMany
   */
  export type resultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter, which results to fetch.
     */
    where?: resultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of results to fetch.
     */
    orderBy?: resultOrderByWithRelationAndSearchRelevanceInput | resultOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing results.
     */
    cursor?: resultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` results.
     */
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * result create
   */
  export type resultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * The data needed to create a result.
     */
    data: XOR<resultCreateInput, resultUncheckedCreateInput>
  }

  /**
   * result createMany
   */
  export type resultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many results.
     */
    data: resultCreateManyInput | resultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * result update
   */
  export type resultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * The data needed to update a result.
     */
    data: XOR<resultUpdateInput, resultUncheckedUpdateInput>
    /**
     * Choose, which result to update.
     */
    where: resultWhereUniqueInput
  }

  /**
   * result updateMany
   */
  export type resultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update results.
     */
    data: XOR<resultUpdateManyMutationInput, resultUncheckedUpdateManyInput>
    /**
     * Filter which results to update
     */
    where?: resultWhereInput
  }

  /**
   * result upsert
   */
  export type resultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * The filter to search for the result to update in case it exists.
     */
    where: resultWhereUniqueInput
    /**
     * In case the result found by the `where` argument doesn't exist, create a new result with this data.
     */
    create: XOR<resultCreateInput, resultUncheckedCreateInput>
    /**
     * In case the result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<resultUpdateInput, resultUncheckedUpdateInput>
  }

  /**
   * result delete
   */
  export type resultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
    /**
     * Filter which result to delete.
     */
    where: resultWhereUniqueInput
  }

  /**
   * result deleteMany
   */
  export type resultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which results to delete
     */
    where?: resultWhereInput
  }

  /**
   * result without action
   */
  export type resultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the result
     */
    select?: resultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    fname: 'fname',
    lname: 'lname',
    email: 'email',
    dob: 'dob',
    class: 'class',
    grno: 'grno',
    contact: 'contact',
    salary: 'salary',
    joiningDate: 'joiningDate',
    addr: 'addr',
    password: 'password',
    activationCode: 'activationCode',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SubjectsScalarFieldEnum: {
    id: 'id',
    class: 'class',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type SubjectsScalarFieldEnum = (typeof SubjectsScalarFieldEnum)[keyof typeof SubjectsScalarFieldEnum]


  export const SubTeacherScalarFieldEnum: {
    subId: 'subId',
    teacherId: 'teacherId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type SubTeacherScalarFieldEnum = (typeof SubTeacherScalarFieldEnum)[keyof typeof SubTeacherScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    stdId: 'stdId',
    attDate: 'attDate',
    present: 'present',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const ExamsScalarFieldEnum: {
    id: 'id',
    examName: 'examName',
    examDate: 'examDate',
    totalMarks: 'totalMarks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type ExamsScalarFieldEnum = (typeof ExamsScalarFieldEnum)[keyof typeof ExamsScalarFieldEnum]


  export const ResultScalarFieldEnum: {
    stdId: 'stdId',
    subId: 'subId',
    examId: 'examId',
    examdate: 'examdate',
    obtainedMarks: 'obtainedMarks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const usersOrderByRelevanceFieldEnum: {
    fname: 'fname',
    lname: 'lname',
    email: 'email',
    grno: 'grno',
    contact: 'contact',
    addr: 'addr',
    password: 'password',
    activationCode: 'activationCode'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  export const roleOrderByRelevanceFieldEnum: {
    role: 'role'
  };

  export type roleOrderByRelevanceFieldEnum = (typeof roleOrderByRelevanceFieldEnum)[keyof typeof roleOrderByRelevanceFieldEnum]


  export const subjectsOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description'
  };

  export type subjectsOrderByRelevanceFieldEnum = (typeof subjectsOrderByRelevanceFieldEnum)[keyof typeof subjectsOrderByRelevanceFieldEnum]


  export const examsOrderByRelevanceFieldEnum: {
    examName: 'examName'
  };

  export type examsOrderByRelevanceFieldEnum = (typeof examsOrderByRelevanceFieldEnum)[keyof typeof examsOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    roleId?: IntFilter<"users"> | number
    fname?: StringFilter<"users"> | string
    lname?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    dob?: DateTimeFilter<"users"> | Date | string
    class?: IntFilter<"users"> | number
    grno?: StringNullableFilter<"users"> | string | null
    contact?: StringFilter<"users"> | string
    salary?: IntNullableFilter<"users"> | number | null
    joiningDate?: DateTimeFilter<"users"> | Date | string
    addr?: StringNullableFilter<"users"> | string | null
    password?: StringNullableFilter<"users"> | string | null
    activationCode?: StringFilter<"users"> | string
    isActive?: BoolFilter<"users"> | boolean
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    isDelete?: BoolFilter<"users"> | boolean
    subTeacher?: SubTeacherListRelationFilter
    attendance?: AttendanceListRelationFilter
    result?: ResultListRelationFilter
  }

  export type usersOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    roleId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    dob?: SortOrder
    class?: SortOrder
    grno?: SortOrderInput | SortOrder
    contact?: SortOrder
    salary?: SortOrderInput | SortOrder
    joiningDate?: SortOrder
    addr?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    activationCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    subTeacher?: subTeacherOrderByRelationAggregateInput
    attendance?: attendanceOrderByRelationAggregateInput
    result?: resultOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    grno?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    roleId?: IntFilter<"users"> | number
    fname?: StringFilter<"users"> | string
    lname?: StringFilter<"users"> | string
    dob?: DateTimeFilter<"users"> | Date | string
    class?: IntFilter<"users"> | number
    contact?: StringFilter<"users"> | string
    salary?: IntNullableFilter<"users"> | number | null
    joiningDate?: DateTimeFilter<"users"> | Date | string
    addr?: StringNullableFilter<"users"> | string | null
    password?: StringNullableFilter<"users"> | string | null
    activationCode?: StringFilter<"users"> | string
    isActive?: BoolFilter<"users"> | boolean
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    isDelete?: BoolFilter<"users"> | boolean
    subTeacher?: SubTeacherListRelationFilter
    attendance?: AttendanceListRelationFilter
    result?: ResultListRelationFilter
  }, "id" | "email" | "grno">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    dob?: SortOrder
    class?: SortOrder
    grno?: SortOrderInput | SortOrder
    contact?: SortOrder
    salary?: SortOrderInput | SortOrder
    joiningDate?: SortOrder
    addr?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    activationCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    roleId?: IntWithAggregatesFilter<"users"> | number
    fname?: StringWithAggregatesFilter<"users"> | string
    lname?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    dob?: DateTimeWithAggregatesFilter<"users"> | Date | string
    class?: IntWithAggregatesFilter<"users"> | number
    grno?: StringNullableWithAggregatesFilter<"users"> | string | null
    contact?: StringWithAggregatesFilter<"users"> | string
    salary?: IntNullableWithAggregatesFilter<"users"> | number | null
    joiningDate?: DateTimeWithAggregatesFilter<"users"> | Date | string
    addr?: StringNullableWithAggregatesFilter<"users"> | string | null
    password?: StringNullableWithAggregatesFilter<"users"> | string | null
    activationCode?: StringWithAggregatesFilter<"users"> | string
    isActive?: BoolWithAggregatesFilter<"users"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"users"> | boolean
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    id?: IntFilter<"role"> | number
    role?: StringFilter<"role"> | string
    createdAt?: DateTimeFilter<"role"> | Date | string
    updatedAt?: DateTimeFilter<"role"> | Date | string
    isDelete?: BoolFilter<"role"> | boolean
  }

  export type roleOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _relevance?: roleOrderByRelevanceInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    role?: string
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    createdAt?: DateTimeFilter<"role"> | Date | string
    updatedAt?: DateTimeFilter<"role"> | Date | string
    isDelete?: BoolFilter<"role"> | boolean
  }, "id" | "role">

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"role"> | number
    role?: StringWithAggregatesFilter<"role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"role"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"role"> | boolean
  }

  export type subjectsWhereInput = {
    AND?: subjectsWhereInput | subjectsWhereInput[]
    OR?: subjectsWhereInput[]
    NOT?: subjectsWhereInput | subjectsWhereInput[]
    id?: IntFilter<"subjects"> | number
    class?: IntFilter<"subjects"> | number
    name?: StringFilter<"subjects"> | string
    description?: StringFilter<"subjects"> | string
    createdAt?: DateTimeFilter<"subjects"> | Date | string
    updatedAt?: DateTimeFilter<"subjects"> | Date | string
    isDelete?: BoolFilter<"subjects"> | boolean
    subTeacher?: SubTeacherListRelationFilter
    result?: ResultListRelationFilter
  }

  export type subjectsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    class?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    subTeacher?: subTeacherOrderByRelationAggregateInput
    result?: resultOrderByRelationAggregateInput
    _relevance?: subjectsOrderByRelevanceInput
  }

  export type subjectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    class_name?: subjectsClassNameCompoundUniqueInput
    AND?: subjectsWhereInput | subjectsWhereInput[]
    OR?: subjectsWhereInput[]
    NOT?: subjectsWhereInput | subjectsWhereInput[]
    class?: IntFilter<"subjects"> | number
    name?: StringFilter<"subjects"> | string
    description?: StringFilter<"subjects"> | string
    createdAt?: DateTimeFilter<"subjects"> | Date | string
    updatedAt?: DateTimeFilter<"subjects"> | Date | string
    isDelete?: BoolFilter<"subjects"> | boolean
    subTeacher?: SubTeacherListRelationFilter
    result?: ResultListRelationFilter
  }, "id" | "class_name">

  export type subjectsOrderByWithAggregationInput = {
    id?: SortOrder
    class?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: subjectsCountOrderByAggregateInput
    _avg?: subjectsAvgOrderByAggregateInput
    _max?: subjectsMaxOrderByAggregateInput
    _min?: subjectsMinOrderByAggregateInput
    _sum?: subjectsSumOrderByAggregateInput
  }

  export type subjectsScalarWhereWithAggregatesInput = {
    AND?: subjectsScalarWhereWithAggregatesInput | subjectsScalarWhereWithAggregatesInput[]
    OR?: subjectsScalarWhereWithAggregatesInput[]
    NOT?: subjectsScalarWhereWithAggregatesInput | subjectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"subjects"> | number
    class?: IntWithAggregatesFilter<"subjects"> | number
    name?: StringWithAggregatesFilter<"subjects"> | string
    description?: StringWithAggregatesFilter<"subjects"> | string
    createdAt?: DateTimeWithAggregatesFilter<"subjects"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"subjects"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"subjects"> | boolean
  }

  export type subTeacherWhereInput = {
    AND?: subTeacherWhereInput | subTeacherWhereInput[]
    OR?: subTeacherWhereInput[]
    NOT?: subTeacherWhereInput | subTeacherWhereInput[]
    subId?: IntFilter<"subTeacher"> | number
    teacherId?: IntFilter<"subTeacher"> | number
    createdAt?: DateTimeFilter<"subTeacher"> | Date | string
    updatedAt?: DateTimeFilter<"subTeacher"> | Date | string
    isDelete?: BoolFilter<"subTeacher"> | boolean
    subjects?: XOR<SubjectsRelationFilter, subjectsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type subTeacherOrderByWithRelationAndSearchRelevanceInput = {
    subId?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    subjects?: subjectsOrderByWithRelationAndSearchRelevanceInput
    users?: usersOrderByWithRelationAndSearchRelevanceInput
  }

  export type subTeacherWhereUniqueInput = Prisma.AtLeast<{
    subId_teacherId?: subTeacherSubIdTeacherIdCompoundUniqueInput
    AND?: subTeacherWhereInput | subTeacherWhereInput[]
    OR?: subTeacherWhereInput[]
    NOT?: subTeacherWhereInput | subTeacherWhereInput[]
    subId?: IntFilter<"subTeacher"> | number
    teacherId?: IntFilter<"subTeacher"> | number
    createdAt?: DateTimeFilter<"subTeacher"> | Date | string
    updatedAt?: DateTimeFilter<"subTeacher"> | Date | string
    isDelete?: BoolFilter<"subTeacher"> | boolean
    subjects?: XOR<SubjectsRelationFilter, subjectsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "subId_teacherId">

  export type subTeacherOrderByWithAggregationInput = {
    subId?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: subTeacherCountOrderByAggregateInput
    _avg?: subTeacherAvgOrderByAggregateInput
    _max?: subTeacherMaxOrderByAggregateInput
    _min?: subTeacherMinOrderByAggregateInput
    _sum?: subTeacherSumOrderByAggregateInput
  }

  export type subTeacherScalarWhereWithAggregatesInput = {
    AND?: subTeacherScalarWhereWithAggregatesInput | subTeacherScalarWhereWithAggregatesInput[]
    OR?: subTeacherScalarWhereWithAggregatesInput[]
    NOT?: subTeacherScalarWhereWithAggregatesInput | subTeacherScalarWhereWithAggregatesInput[]
    subId?: IntWithAggregatesFilter<"subTeacher"> | number
    teacherId?: IntWithAggregatesFilter<"subTeacher"> | number
    createdAt?: DateTimeWithAggregatesFilter<"subTeacher"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"subTeacher"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"subTeacher"> | boolean
  }

  export type attendanceWhereInput = {
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    id?: IntFilter<"attendance"> | number
    stdId?: IntFilter<"attendance"> | number
    attDate?: DateTimeFilter<"attendance"> | Date | string
    present?: BoolFilter<"attendance"> | boolean
    createdAt?: DateTimeFilter<"attendance"> | Date | string
    updatedAt?: DateTimeFilter<"attendance"> | Date | string
    isDelete?: BoolFilter<"attendance"> | boolean
    student?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type attendanceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    stdId?: SortOrder
    attDate?: SortOrder
    present?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    student?: usersOrderByWithRelationAndSearchRelevanceInput
  }

  export type attendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    stdId_attDate?: attendanceStdIdAttDateCompoundUniqueInput
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    stdId?: IntFilter<"attendance"> | number
    attDate?: DateTimeFilter<"attendance"> | Date | string
    present?: BoolFilter<"attendance"> | boolean
    createdAt?: DateTimeFilter<"attendance"> | Date | string
    updatedAt?: DateTimeFilter<"attendance"> | Date | string
    isDelete?: BoolFilter<"attendance"> | boolean
    student?: XOR<UsersRelationFilter, usersWhereInput>
  }, "id" | "stdId_attDate">

  export type attendanceOrderByWithAggregationInput = {
    id?: SortOrder
    stdId?: SortOrder
    attDate?: SortOrder
    present?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: attendanceCountOrderByAggregateInput
    _avg?: attendanceAvgOrderByAggregateInput
    _max?: attendanceMaxOrderByAggregateInput
    _min?: attendanceMinOrderByAggregateInput
    _sum?: attendanceSumOrderByAggregateInput
  }

  export type attendanceScalarWhereWithAggregatesInput = {
    AND?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    OR?: attendanceScalarWhereWithAggregatesInput[]
    NOT?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"attendance"> | number
    stdId?: IntWithAggregatesFilter<"attendance"> | number
    attDate?: DateTimeWithAggregatesFilter<"attendance"> | Date | string
    present?: BoolWithAggregatesFilter<"attendance"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"attendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"attendance"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"attendance"> | boolean
  }

  export type examsWhereInput = {
    AND?: examsWhereInput | examsWhereInput[]
    OR?: examsWhereInput[]
    NOT?: examsWhereInput | examsWhereInput[]
    id?: IntFilter<"exams"> | number
    examName?: StringFilter<"exams"> | string
    examDate?: DateTimeFilter<"exams"> | Date | string
    totalMarks?: IntFilter<"exams"> | number
    createdAt?: DateTimeFilter<"exams"> | Date | string
    updatedAt?: DateTimeFilter<"exams"> | Date | string
    isDelete?: BoolFilter<"exams"> | boolean
    result?: ResultListRelationFilter
  }

  export type examsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    examName?: SortOrder
    examDate?: SortOrder
    totalMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    result?: resultOrderByRelationAggregateInput
    _relevance?: examsOrderByRelevanceInput
  }

  export type examsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: examsWhereInput | examsWhereInput[]
    OR?: examsWhereInput[]
    NOT?: examsWhereInput | examsWhereInput[]
    examName?: StringFilter<"exams"> | string
    examDate?: DateTimeFilter<"exams"> | Date | string
    totalMarks?: IntFilter<"exams"> | number
    createdAt?: DateTimeFilter<"exams"> | Date | string
    updatedAt?: DateTimeFilter<"exams"> | Date | string
    isDelete?: BoolFilter<"exams"> | boolean
    result?: ResultListRelationFilter
  }, "id">

  export type examsOrderByWithAggregationInput = {
    id?: SortOrder
    examName?: SortOrder
    examDate?: SortOrder
    totalMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: examsCountOrderByAggregateInput
    _avg?: examsAvgOrderByAggregateInput
    _max?: examsMaxOrderByAggregateInput
    _min?: examsMinOrderByAggregateInput
    _sum?: examsSumOrderByAggregateInput
  }

  export type examsScalarWhereWithAggregatesInput = {
    AND?: examsScalarWhereWithAggregatesInput | examsScalarWhereWithAggregatesInput[]
    OR?: examsScalarWhereWithAggregatesInput[]
    NOT?: examsScalarWhereWithAggregatesInput | examsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exams"> | number
    examName?: StringWithAggregatesFilter<"exams"> | string
    examDate?: DateTimeWithAggregatesFilter<"exams"> | Date | string
    totalMarks?: IntWithAggregatesFilter<"exams"> | number
    createdAt?: DateTimeWithAggregatesFilter<"exams"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"exams"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"exams"> | boolean
  }

  export type resultWhereInput = {
    AND?: resultWhereInput | resultWhereInput[]
    OR?: resultWhereInput[]
    NOT?: resultWhereInput | resultWhereInput[]
    stdId?: IntFilter<"result"> | number
    subId?: IntFilter<"result"> | number
    examId?: IntFilter<"result"> | number
    examdate?: DateTimeFilter<"result"> | Date | string
    obtainedMarks?: IntFilter<"result"> | number
    createdAt?: DateTimeFilter<"result"> | Date | string
    updatedAt?: DateTimeFilter<"result"> | Date | string
    isDelete?: BoolFilter<"result"> | boolean
    student?: XOR<UsersRelationFilter, usersWhereInput>
    subjects?: XOR<SubjectsRelationFilter, subjectsWhereInput>
    exams?: XOR<ExamsRelationFilter, examsWhereInput>
  }

  export type resultOrderByWithRelationAndSearchRelevanceInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    examdate?: SortOrder
    obtainedMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    student?: usersOrderByWithRelationAndSearchRelevanceInput
    subjects?: subjectsOrderByWithRelationAndSearchRelevanceInput
    exams?: examsOrderByWithRelationAndSearchRelevanceInput
  }

  export type resultWhereUniqueInput = Prisma.AtLeast<{
    stdId_subId?: resultStdIdSubIdCompoundUniqueInput
    AND?: resultWhereInput | resultWhereInput[]
    OR?: resultWhereInput[]
    NOT?: resultWhereInput | resultWhereInput[]
    stdId?: IntFilter<"result"> | number
    subId?: IntFilter<"result"> | number
    examId?: IntFilter<"result"> | number
    examdate?: DateTimeFilter<"result"> | Date | string
    obtainedMarks?: IntFilter<"result"> | number
    createdAt?: DateTimeFilter<"result"> | Date | string
    updatedAt?: DateTimeFilter<"result"> | Date | string
    isDelete?: BoolFilter<"result"> | boolean
    student?: XOR<UsersRelationFilter, usersWhereInput>
    subjects?: XOR<SubjectsRelationFilter, subjectsWhereInput>
    exams?: XOR<ExamsRelationFilter, examsWhereInput>
  }, "stdId_subId">

  export type resultOrderByWithAggregationInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    examdate?: SortOrder
    obtainedMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: resultCountOrderByAggregateInput
    _avg?: resultAvgOrderByAggregateInput
    _max?: resultMaxOrderByAggregateInput
    _min?: resultMinOrderByAggregateInput
    _sum?: resultSumOrderByAggregateInput
  }

  export type resultScalarWhereWithAggregatesInput = {
    AND?: resultScalarWhereWithAggregatesInput | resultScalarWhereWithAggregatesInput[]
    OR?: resultScalarWhereWithAggregatesInput[]
    NOT?: resultScalarWhereWithAggregatesInput | resultScalarWhereWithAggregatesInput[]
    stdId?: IntWithAggregatesFilter<"result"> | number
    subId?: IntWithAggregatesFilter<"result"> | number
    examId?: IntWithAggregatesFilter<"result"> | number
    examdate?: DateTimeWithAggregatesFilter<"result"> | Date | string
    obtainedMarks?: IntWithAggregatesFilter<"result"> | number
    createdAt?: DateTimeWithAggregatesFilter<"result"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"result"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"result"> | boolean
  }

  export type usersCreateInput = {
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherCreateNestedManyWithoutUsersInput
    attendance?: attendanceCreateNestedManyWithoutStudentInput
    result?: resultCreateNestedManyWithoutStudentInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherUncheckedCreateNestedManyWithoutUsersInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutStudentInput
    result?: resultUncheckedCreateNestedManyWithoutStudentInput
  }

  export type usersUpdateInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUpdateManyWithoutUsersNestedInput
    attendance?: attendanceUpdateManyWithoutStudentNestedInput
    result?: resultUpdateManyWithoutStudentNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUncheckedUpdateManyWithoutUsersNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutStudentNestedInput
    result?: resultUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type usersUpdateManyMutationInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type roleCreateInput = {
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type roleUncheckedCreateInput = {
    id?: number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type roleUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type roleCreateManyInput = {
    id?: number
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type roleUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subjectsCreateInput = {
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherCreateNestedManyWithoutSubjectsInput
    result?: resultCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsUncheckedCreateInput = {
    id?: number
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherUncheckedCreateNestedManyWithoutSubjectsInput
    result?: resultUncheckedCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsUpdateInput = {
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUpdateManyWithoutSubjectsNestedInput
    result?: resultUpdateManyWithoutSubjectsNestedInput
  }

  export type subjectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    result?: resultUncheckedUpdateManyWithoutSubjectsNestedInput
  }

  export type subjectsCreateManyInput = {
    id?: number
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subjectsUpdateManyMutationInput = {
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subjectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subjects: subjectsCreateNestedOneWithoutSubTeacherInput
    users: usersCreateNestedOneWithoutSubTeacherInput
  }

  export type subTeacherUncheckedCreateInput = {
    subId: number
    teacherId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subjects?: subjectsUpdateOneRequiredWithoutSubTeacherNestedInput
    users?: usersUpdateOneRequiredWithoutSubTeacherNestedInput
  }

  export type subTeacherUncheckedUpdateInput = {
    subId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherCreateManyInput = {
    subId: number
    teacherId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherUncheckedUpdateManyInput = {
    subId?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceCreateInput = {
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    student: usersCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateInput = {
    id?: number
    stdId: number
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type attendanceUpdateInput = {
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    student?: usersUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stdId?: IntFieldUpdateOperationsInput | number
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceCreateManyInput = {
    id?: number
    stdId: number
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type attendanceUpdateManyMutationInput = {
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stdId?: IntFieldUpdateOperationsInput | number
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type examsCreateInput = {
    examName: string
    examDate: Date | string
    totalMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    result?: resultCreateNestedManyWithoutExamsInput
  }

  export type examsUncheckedCreateInput = {
    id?: number
    examName: string
    examDate: Date | string
    totalMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    result?: resultUncheckedCreateNestedManyWithoutExamsInput
  }

  export type examsUpdateInput = {
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    result?: resultUpdateManyWithoutExamsNestedInput
  }

  export type examsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    result?: resultUncheckedUpdateManyWithoutExamsNestedInput
  }

  export type examsCreateManyInput = {
    id?: number
    examName: string
    examDate: Date | string
    totalMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type examsUpdateManyMutationInput = {
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type examsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultCreateInput = {
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    student: usersCreateNestedOneWithoutResultInput
    subjects: subjectsCreateNestedOneWithoutResultInput
    exams: examsCreateNestedOneWithoutResultInput
  }

  export type resultUncheckedCreateInput = {
    stdId: number
    subId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultUpdateInput = {
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    student?: usersUpdateOneRequiredWithoutResultNestedInput
    subjects?: subjectsUpdateOneRequiredWithoutResultNestedInput
    exams?: examsUpdateOneRequiredWithoutResultNestedInput
  }

  export type resultUncheckedUpdateInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    subId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultCreateManyInput = {
    stdId: number
    subId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultUpdateManyMutationInput = {
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUncheckedUpdateManyInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    subId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SubTeacherListRelationFilter = {
    every?: subTeacherWhereInput
    some?: subTeacherWhereInput
    none?: subTeacherWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: attendanceWhereInput
    some?: attendanceWhereInput
    none?: attendanceWhereInput
  }

  export type ResultListRelationFilter = {
    every?: resultWhereInput
    some?: resultWhereInput
    none?: resultWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type subTeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type attendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type resultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    dob?: SortOrder
    class?: SortOrder
    grno?: SortOrder
    contact?: SortOrder
    salary?: SortOrder
    joiningDate?: SortOrder
    addr?: SortOrder
    password?: SortOrder
    activationCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    class?: SortOrder
    salary?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    dob?: SortOrder
    class?: SortOrder
    grno?: SortOrder
    contact?: SortOrder
    salary?: SortOrder
    joiningDate?: SortOrder
    addr?: SortOrder
    password?: SortOrder
    activationCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    email?: SortOrder
    dob?: SortOrder
    class?: SortOrder
    grno?: SortOrder
    contact?: SortOrder
    salary?: SortOrder
    joiningDate?: SortOrder
    addr?: SortOrder
    password?: SortOrder
    activationCode?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    class?: SortOrder
    salary?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type roleOrderByRelevanceInput = {
    fields: roleOrderByRelevanceFieldEnum | roleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type subjectsOrderByRelevanceInput = {
    fields: subjectsOrderByRelevanceFieldEnum | subjectsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type subjectsClassNameCompoundUniqueInput = {
    class: number
    name: string
  }

  export type subjectsCountOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subjectsAvgOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
  }

  export type subjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subjectsMinOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subjectsSumOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
  }

  export type SubjectsRelationFilter = {
    is?: subjectsWhereInput
    isNot?: subjectsWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type subTeacherSubIdTeacherIdCompoundUniqueInput = {
    subId: number
    teacherId: number
  }

  export type subTeacherCountOrderByAggregateInput = {
    subId?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subTeacherAvgOrderByAggregateInput = {
    subId?: SortOrder
    teacherId?: SortOrder
  }

  export type subTeacherMaxOrderByAggregateInput = {
    subId?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subTeacherMinOrderByAggregateInput = {
    subId?: SortOrder
    teacherId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type subTeacherSumOrderByAggregateInput = {
    subId?: SortOrder
    teacherId?: SortOrder
  }

  export type attendanceStdIdAttDateCompoundUniqueInput = {
    stdId: number
    attDate: Date | string
  }

  export type attendanceCountOrderByAggregateInput = {
    id?: SortOrder
    stdId?: SortOrder
    attDate?: SortOrder
    present?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type attendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    stdId?: SortOrder
  }

  export type attendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    stdId?: SortOrder
    attDate?: SortOrder
    present?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type attendanceMinOrderByAggregateInput = {
    id?: SortOrder
    stdId?: SortOrder
    attDate?: SortOrder
    present?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type attendanceSumOrderByAggregateInput = {
    id?: SortOrder
    stdId?: SortOrder
  }

  export type examsOrderByRelevanceInput = {
    fields: examsOrderByRelevanceFieldEnum | examsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type examsCountOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    examDate?: SortOrder
    totalMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type examsAvgOrderByAggregateInput = {
    id?: SortOrder
    totalMarks?: SortOrder
  }

  export type examsMaxOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    examDate?: SortOrder
    totalMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type examsMinOrderByAggregateInput = {
    id?: SortOrder
    examName?: SortOrder
    examDate?: SortOrder
    totalMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type examsSumOrderByAggregateInput = {
    id?: SortOrder
    totalMarks?: SortOrder
  }

  export type ExamsRelationFilter = {
    is?: examsWhereInput
    isNot?: examsWhereInput
  }

  export type resultStdIdSubIdCompoundUniqueInput = {
    stdId: number
    subId: number
  }

  export type resultCountOrderByAggregateInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    examdate?: SortOrder
    obtainedMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type resultAvgOrderByAggregateInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    obtainedMarks?: SortOrder
  }

  export type resultMaxOrderByAggregateInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    examdate?: SortOrder
    obtainedMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type resultMinOrderByAggregateInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    examdate?: SortOrder
    obtainedMarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type resultSumOrderByAggregateInput = {
    stdId?: SortOrder
    subId?: SortOrder
    examId?: SortOrder
    obtainedMarks?: SortOrder
  }

  export type subTeacherCreateNestedManyWithoutUsersInput = {
    create?: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput> | subTeacherCreateWithoutUsersInput[] | subTeacherUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutUsersInput | subTeacherCreateOrConnectWithoutUsersInput[]
    createMany?: subTeacherCreateManyUsersInputEnvelope
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
  }

  export type attendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput> | attendanceCreateWithoutStudentInput[] | attendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutStudentInput | attendanceCreateOrConnectWithoutStudentInput[]
    createMany?: attendanceCreateManyStudentInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type resultCreateNestedManyWithoutStudentInput = {
    create?: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput> | resultCreateWithoutStudentInput[] | resultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: resultCreateOrConnectWithoutStudentInput | resultCreateOrConnectWithoutStudentInput[]
    createMany?: resultCreateManyStudentInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type subTeacherUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput> | subTeacherCreateWithoutUsersInput[] | subTeacherUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutUsersInput | subTeacherCreateOrConnectWithoutUsersInput[]
    createMany?: subTeacherCreateManyUsersInputEnvelope
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
  }

  export type attendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput> | attendanceCreateWithoutStudentInput[] | attendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutStudentInput | attendanceCreateOrConnectWithoutStudentInput[]
    createMany?: attendanceCreateManyStudentInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type resultUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput> | resultCreateWithoutStudentInput[] | resultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: resultCreateOrConnectWithoutStudentInput | resultCreateOrConnectWithoutStudentInput[]
    createMany?: resultCreateManyStudentInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type subTeacherUpdateManyWithoutUsersNestedInput = {
    create?: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput> | subTeacherCreateWithoutUsersInput[] | subTeacherUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutUsersInput | subTeacherCreateOrConnectWithoutUsersInput[]
    upsert?: subTeacherUpsertWithWhereUniqueWithoutUsersInput | subTeacherUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: subTeacherCreateManyUsersInputEnvelope
    set?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    disconnect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    delete?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    update?: subTeacherUpdateWithWhereUniqueWithoutUsersInput | subTeacherUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: subTeacherUpdateManyWithWhereWithoutUsersInput | subTeacherUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
  }

  export type attendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput> | attendanceCreateWithoutStudentInput[] | attendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutStudentInput | attendanceCreateOrConnectWithoutStudentInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutStudentInput | attendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: attendanceCreateManyStudentInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutStudentInput | attendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutStudentInput | attendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type resultUpdateManyWithoutStudentNestedInput = {
    create?: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput> | resultCreateWithoutStudentInput[] | resultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: resultCreateOrConnectWithoutStudentInput | resultCreateOrConnectWithoutStudentInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutStudentInput | resultUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: resultCreateManyStudentInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutStudentInput | resultUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: resultUpdateManyWithWhereWithoutStudentInput | resultUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type subTeacherUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput> | subTeacherCreateWithoutUsersInput[] | subTeacherUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutUsersInput | subTeacherCreateOrConnectWithoutUsersInput[]
    upsert?: subTeacherUpsertWithWhereUniqueWithoutUsersInput | subTeacherUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: subTeacherCreateManyUsersInputEnvelope
    set?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    disconnect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    delete?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    update?: subTeacherUpdateWithWhereUniqueWithoutUsersInput | subTeacherUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: subTeacherUpdateManyWithWhereWithoutUsersInput | subTeacherUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
  }

  export type attendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput> | attendanceCreateWithoutStudentInput[] | attendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutStudentInput | attendanceCreateOrConnectWithoutStudentInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutStudentInput | attendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: attendanceCreateManyStudentInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutStudentInput | attendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutStudentInput | attendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type resultUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput> | resultCreateWithoutStudentInput[] | resultUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: resultCreateOrConnectWithoutStudentInput | resultCreateOrConnectWithoutStudentInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutStudentInput | resultUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: resultCreateManyStudentInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutStudentInput | resultUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: resultUpdateManyWithWhereWithoutStudentInput | resultUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type subTeacherCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput> | subTeacherCreateWithoutSubjectsInput[] | subTeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutSubjectsInput | subTeacherCreateOrConnectWithoutSubjectsInput[]
    createMany?: subTeacherCreateManySubjectsInputEnvelope
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
  }

  export type resultCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput> | resultCreateWithoutSubjectsInput[] | resultUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutSubjectsInput | resultCreateOrConnectWithoutSubjectsInput[]
    createMany?: resultCreateManySubjectsInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type subTeacherUncheckedCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput> | subTeacherCreateWithoutSubjectsInput[] | subTeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutSubjectsInput | subTeacherCreateOrConnectWithoutSubjectsInput[]
    createMany?: subTeacherCreateManySubjectsInputEnvelope
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
  }

  export type resultUncheckedCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput> | resultCreateWithoutSubjectsInput[] | resultUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutSubjectsInput | resultCreateOrConnectWithoutSubjectsInput[]
    createMany?: resultCreateManySubjectsInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type subTeacherUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput> | subTeacherCreateWithoutSubjectsInput[] | subTeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutSubjectsInput | subTeacherCreateOrConnectWithoutSubjectsInput[]
    upsert?: subTeacherUpsertWithWhereUniqueWithoutSubjectsInput | subTeacherUpsertWithWhereUniqueWithoutSubjectsInput[]
    createMany?: subTeacherCreateManySubjectsInputEnvelope
    set?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    disconnect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    delete?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    update?: subTeacherUpdateWithWhereUniqueWithoutSubjectsInput | subTeacherUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: subTeacherUpdateManyWithWhereWithoutSubjectsInput | subTeacherUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
  }

  export type resultUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput> | resultCreateWithoutSubjectsInput[] | resultUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutSubjectsInput | resultCreateOrConnectWithoutSubjectsInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutSubjectsInput | resultUpsertWithWhereUniqueWithoutSubjectsInput[]
    createMany?: resultCreateManySubjectsInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutSubjectsInput | resultUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: resultUpdateManyWithWhereWithoutSubjectsInput | resultUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type subTeacherUncheckedUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput> | subTeacherCreateWithoutSubjectsInput[] | subTeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: subTeacherCreateOrConnectWithoutSubjectsInput | subTeacherCreateOrConnectWithoutSubjectsInput[]
    upsert?: subTeacherUpsertWithWhereUniqueWithoutSubjectsInput | subTeacherUpsertWithWhereUniqueWithoutSubjectsInput[]
    createMany?: subTeacherCreateManySubjectsInputEnvelope
    set?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    disconnect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    delete?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    connect?: subTeacherWhereUniqueInput | subTeacherWhereUniqueInput[]
    update?: subTeacherUpdateWithWhereUniqueWithoutSubjectsInput | subTeacherUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: subTeacherUpdateManyWithWhereWithoutSubjectsInput | subTeacherUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
  }

  export type resultUncheckedUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput> | resultCreateWithoutSubjectsInput[] | resultUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutSubjectsInput | resultCreateOrConnectWithoutSubjectsInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutSubjectsInput | resultUpsertWithWhereUniqueWithoutSubjectsInput[]
    createMany?: resultCreateManySubjectsInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutSubjectsInput | resultUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: resultUpdateManyWithWhereWithoutSubjectsInput | resultUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type subjectsCreateNestedOneWithoutSubTeacherInput = {
    create?: XOR<subjectsCreateWithoutSubTeacherInput, subjectsUncheckedCreateWithoutSubTeacherInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutSubTeacherInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutSubTeacherInput = {
    create?: XOR<usersCreateWithoutSubTeacherInput, usersUncheckedCreateWithoutSubTeacherInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubTeacherInput
    connect?: usersWhereUniqueInput
  }

  export type subjectsUpdateOneRequiredWithoutSubTeacherNestedInput = {
    create?: XOR<subjectsCreateWithoutSubTeacherInput, subjectsUncheckedCreateWithoutSubTeacherInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutSubTeacherInput
    upsert?: subjectsUpsertWithoutSubTeacherInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutSubTeacherInput, subjectsUpdateWithoutSubTeacherInput>, subjectsUncheckedUpdateWithoutSubTeacherInput>
  }

  export type usersUpdateOneRequiredWithoutSubTeacherNestedInput = {
    create?: XOR<usersCreateWithoutSubTeacherInput, usersUncheckedCreateWithoutSubTeacherInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubTeacherInput
    upsert?: usersUpsertWithoutSubTeacherInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutSubTeacherInput, usersUpdateWithoutSubTeacherInput>, usersUncheckedUpdateWithoutSubTeacherInput>
  }

  export type usersCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: usersCreateOrConnectWithoutAttendanceInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: usersCreateOrConnectWithoutAttendanceInput
    upsert?: usersUpsertWithoutAttendanceInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAttendanceInput, usersUpdateWithoutAttendanceInput>, usersUncheckedUpdateWithoutAttendanceInput>
  }

  export type resultCreateNestedManyWithoutExamsInput = {
    create?: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput> | resultCreateWithoutExamsInput[] | resultUncheckedCreateWithoutExamsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutExamsInput | resultCreateOrConnectWithoutExamsInput[]
    createMany?: resultCreateManyExamsInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type resultUncheckedCreateNestedManyWithoutExamsInput = {
    create?: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput> | resultCreateWithoutExamsInput[] | resultUncheckedCreateWithoutExamsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutExamsInput | resultCreateOrConnectWithoutExamsInput[]
    createMany?: resultCreateManyExamsInputEnvelope
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
  }

  export type resultUpdateManyWithoutExamsNestedInput = {
    create?: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput> | resultCreateWithoutExamsInput[] | resultUncheckedCreateWithoutExamsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutExamsInput | resultCreateOrConnectWithoutExamsInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutExamsInput | resultUpsertWithWhereUniqueWithoutExamsInput[]
    createMany?: resultCreateManyExamsInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutExamsInput | resultUpdateWithWhereUniqueWithoutExamsInput[]
    updateMany?: resultUpdateManyWithWhereWithoutExamsInput | resultUpdateManyWithWhereWithoutExamsInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type resultUncheckedUpdateManyWithoutExamsNestedInput = {
    create?: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput> | resultCreateWithoutExamsInput[] | resultUncheckedCreateWithoutExamsInput[]
    connectOrCreate?: resultCreateOrConnectWithoutExamsInput | resultCreateOrConnectWithoutExamsInput[]
    upsert?: resultUpsertWithWhereUniqueWithoutExamsInput | resultUpsertWithWhereUniqueWithoutExamsInput[]
    createMany?: resultCreateManyExamsInputEnvelope
    set?: resultWhereUniqueInput | resultWhereUniqueInput[]
    disconnect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    delete?: resultWhereUniqueInput | resultWhereUniqueInput[]
    connect?: resultWhereUniqueInput | resultWhereUniqueInput[]
    update?: resultUpdateWithWhereUniqueWithoutExamsInput | resultUpdateWithWhereUniqueWithoutExamsInput[]
    updateMany?: resultUpdateManyWithWhereWithoutExamsInput | resultUpdateManyWithWhereWithoutExamsInput[]
    deleteMany?: resultScalarWhereInput | resultScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutResultInput = {
    create?: XOR<usersCreateWithoutResultInput, usersUncheckedCreateWithoutResultInput>
    connectOrCreate?: usersCreateOrConnectWithoutResultInput
    connect?: usersWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutResultInput = {
    create?: XOR<subjectsCreateWithoutResultInput, subjectsUncheckedCreateWithoutResultInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutResultInput
    connect?: subjectsWhereUniqueInput
  }

  export type examsCreateNestedOneWithoutResultInput = {
    create?: XOR<examsCreateWithoutResultInput, examsUncheckedCreateWithoutResultInput>
    connectOrCreate?: examsCreateOrConnectWithoutResultInput
    connect?: examsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<usersCreateWithoutResultInput, usersUncheckedCreateWithoutResultInput>
    connectOrCreate?: usersCreateOrConnectWithoutResultInput
    upsert?: usersUpsertWithoutResultInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutResultInput, usersUpdateWithoutResultInput>, usersUncheckedUpdateWithoutResultInput>
  }

  export type subjectsUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<subjectsCreateWithoutResultInput, subjectsUncheckedCreateWithoutResultInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutResultInput
    upsert?: subjectsUpsertWithoutResultInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutResultInput, subjectsUpdateWithoutResultInput>, subjectsUncheckedUpdateWithoutResultInput>
  }

  export type examsUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<examsCreateWithoutResultInput, examsUncheckedCreateWithoutResultInput>
    connectOrCreate?: examsCreateOrConnectWithoutResultInput
    upsert?: examsUpsertWithoutResultInput
    connect?: examsWhereUniqueInput
    update?: XOR<XOR<examsUpdateToOneWithWhereWithoutResultInput, examsUpdateWithoutResultInput>, examsUncheckedUpdateWithoutResultInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type subTeacherCreateWithoutUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subjects: subjectsCreateNestedOneWithoutSubTeacherInput
  }

  export type subTeacherUncheckedCreateWithoutUsersInput = {
    subId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherCreateOrConnectWithoutUsersInput = {
    where: subTeacherWhereUniqueInput
    create: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput>
  }

  export type subTeacherCreateManyUsersInputEnvelope = {
    data: subTeacherCreateManyUsersInput | subTeacherCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type attendanceCreateWithoutStudentInput = {
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type attendanceUncheckedCreateWithoutStudentInput = {
    id?: number
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type attendanceCreateOrConnectWithoutStudentInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput>
  }

  export type attendanceCreateManyStudentInputEnvelope = {
    data: attendanceCreateManyStudentInput | attendanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type resultCreateWithoutStudentInput = {
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subjects: subjectsCreateNestedOneWithoutResultInput
    exams: examsCreateNestedOneWithoutResultInput
  }

  export type resultUncheckedCreateWithoutStudentInput = {
    subId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultCreateOrConnectWithoutStudentInput = {
    where: resultWhereUniqueInput
    create: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput>
  }

  export type resultCreateManyStudentInputEnvelope = {
    data: resultCreateManyStudentInput | resultCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type subTeacherUpsertWithWhereUniqueWithoutUsersInput = {
    where: subTeacherWhereUniqueInput
    update: XOR<subTeacherUpdateWithoutUsersInput, subTeacherUncheckedUpdateWithoutUsersInput>
    create: XOR<subTeacherCreateWithoutUsersInput, subTeacherUncheckedCreateWithoutUsersInput>
  }

  export type subTeacherUpdateWithWhereUniqueWithoutUsersInput = {
    where: subTeacherWhereUniqueInput
    data: XOR<subTeacherUpdateWithoutUsersInput, subTeacherUncheckedUpdateWithoutUsersInput>
  }

  export type subTeacherUpdateManyWithWhereWithoutUsersInput = {
    where: subTeacherScalarWhereInput
    data: XOR<subTeacherUpdateManyMutationInput, subTeacherUncheckedUpdateManyWithoutUsersInput>
  }

  export type subTeacherScalarWhereInput = {
    AND?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
    OR?: subTeacherScalarWhereInput[]
    NOT?: subTeacherScalarWhereInput | subTeacherScalarWhereInput[]
    subId?: IntFilter<"subTeacher"> | number
    teacherId?: IntFilter<"subTeacher"> | number
    createdAt?: DateTimeFilter<"subTeacher"> | Date | string
    updatedAt?: DateTimeFilter<"subTeacher"> | Date | string
    isDelete?: BoolFilter<"subTeacher"> | boolean
  }

  export type attendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: attendanceWhereUniqueInput
    update: XOR<attendanceUpdateWithoutStudentInput, attendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<attendanceCreateWithoutStudentInput, attendanceUncheckedCreateWithoutStudentInput>
  }

  export type attendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: attendanceWhereUniqueInput
    data: XOR<attendanceUpdateWithoutStudentInput, attendanceUncheckedUpdateWithoutStudentInput>
  }

  export type attendanceUpdateManyWithWhereWithoutStudentInput = {
    where: attendanceScalarWhereInput
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type attendanceScalarWhereInput = {
    AND?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    OR?: attendanceScalarWhereInput[]
    NOT?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    id?: IntFilter<"attendance"> | number
    stdId?: IntFilter<"attendance"> | number
    attDate?: DateTimeFilter<"attendance"> | Date | string
    present?: BoolFilter<"attendance"> | boolean
    createdAt?: DateTimeFilter<"attendance"> | Date | string
    updatedAt?: DateTimeFilter<"attendance"> | Date | string
    isDelete?: BoolFilter<"attendance"> | boolean
  }

  export type resultUpsertWithWhereUniqueWithoutStudentInput = {
    where: resultWhereUniqueInput
    update: XOR<resultUpdateWithoutStudentInput, resultUncheckedUpdateWithoutStudentInput>
    create: XOR<resultCreateWithoutStudentInput, resultUncheckedCreateWithoutStudentInput>
  }

  export type resultUpdateWithWhereUniqueWithoutStudentInput = {
    where: resultWhereUniqueInput
    data: XOR<resultUpdateWithoutStudentInput, resultUncheckedUpdateWithoutStudentInput>
  }

  export type resultUpdateManyWithWhereWithoutStudentInput = {
    where: resultScalarWhereInput
    data: XOR<resultUpdateManyMutationInput, resultUncheckedUpdateManyWithoutStudentInput>
  }

  export type resultScalarWhereInput = {
    AND?: resultScalarWhereInput | resultScalarWhereInput[]
    OR?: resultScalarWhereInput[]
    NOT?: resultScalarWhereInput | resultScalarWhereInput[]
    stdId?: IntFilter<"result"> | number
    subId?: IntFilter<"result"> | number
    examId?: IntFilter<"result"> | number
    examdate?: DateTimeFilter<"result"> | Date | string
    obtainedMarks?: IntFilter<"result"> | number
    createdAt?: DateTimeFilter<"result"> | Date | string
    updatedAt?: DateTimeFilter<"result"> | Date | string
    isDelete?: BoolFilter<"result"> | boolean
  }

  export type subTeacherCreateWithoutSubjectsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    users: usersCreateNestedOneWithoutSubTeacherInput
  }

  export type subTeacherUncheckedCreateWithoutSubjectsInput = {
    teacherId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherCreateOrConnectWithoutSubjectsInput = {
    where: subTeacherWhereUniqueInput
    create: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput>
  }

  export type subTeacherCreateManySubjectsInputEnvelope = {
    data: subTeacherCreateManySubjectsInput | subTeacherCreateManySubjectsInput[]
    skipDuplicates?: boolean
  }

  export type resultCreateWithoutSubjectsInput = {
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    student: usersCreateNestedOneWithoutResultInput
    exams: examsCreateNestedOneWithoutResultInput
  }

  export type resultUncheckedCreateWithoutSubjectsInput = {
    stdId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultCreateOrConnectWithoutSubjectsInput = {
    where: resultWhereUniqueInput
    create: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput>
  }

  export type resultCreateManySubjectsInputEnvelope = {
    data: resultCreateManySubjectsInput | resultCreateManySubjectsInput[]
    skipDuplicates?: boolean
  }

  export type subTeacherUpsertWithWhereUniqueWithoutSubjectsInput = {
    where: subTeacherWhereUniqueInput
    update: XOR<subTeacherUpdateWithoutSubjectsInput, subTeacherUncheckedUpdateWithoutSubjectsInput>
    create: XOR<subTeacherCreateWithoutSubjectsInput, subTeacherUncheckedCreateWithoutSubjectsInput>
  }

  export type subTeacherUpdateWithWhereUniqueWithoutSubjectsInput = {
    where: subTeacherWhereUniqueInput
    data: XOR<subTeacherUpdateWithoutSubjectsInput, subTeacherUncheckedUpdateWithoutSubjectsInput>
  }

  export type subTeacherUpdateManyWithWhereWithoutSubjectsInput = {
    where: subTeacherScalarWhereInput
    data: XOR<subTeacherUpdateManyMutationInput, subTeacherUncheckedUpdateManyWithoutSubjectsInput>
  }

  export type resultUpsertWithWhereUniqueWithoutSubjectsInput = {
    where: resultWhereUniqueInput
    update: XOR<resultUpdateWithoutSubjectsInput, resultUncheckedUpdateWithoutSubjectsInput>
    create: XOR<resultCreateWithoutSubjectsInput, resultUncheckedCreateWithoutSubjectsInput>
  }

  export type resultUpdateWithWhereUniqueWithoutSubjectsInput = {
    where: resultWhereUniqueInput
    data: XOR<resultUpdateWithoutSubjectsInput, resultUncheckedUpdateWithoutSubjectsInput>
  }

  export type resultUpdateManyWithWhereWithoutSubjectsInput = {
    where: resultScalarWhereInput
    data: XOR<resultUpdateManyMutationInput, resultUncheckedUpdateManyWithoutSubjectsInput>
  }

  export type subjectsCreateWithoutSubTeacherInput = {
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    result?: resultCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsUncheckedCreateWithoutSubTeacherInput = {
    id?: number
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    result?: resultUncheckedCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsCreateOrConnectWithoutSubTeacherInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutSubTeacherInput, subjectsUncheckedCreateWithoutSubTeacherInput>
  }

  export type usersCreateWithoutSubTeacherInput = {
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    attendance?: attendanceCreateNestedManyWithoutStudentInput
    result?: resultCreateNestedManyWithoutStudentInput
  }

  export type usersUncheckedCreateWithoutSubTeacherInput = {
    id?: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    attendance?: attendanceUncheckedCreateNestedManyWithoutStudentInput
    result?: resultUncheckedCreateNestedManyWithoutStudentInput
  }

  export type usersCreateOrConnectWithoutSubTeacherInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSubTeacherInput, usersUncheckedCreateWithoutSubTeacherInput>
  }

  export type subjectsUpsertWithoutSubTeacherInput = {
    update: XOR<subjectsUpdateWithoutSubTeacherInput, subjectsUncheckedUpdateWithoutSubTeacherInput>
    create: XOR<subjectsCreateWithoutSubTeacherInput, subjectsUncheckedCreateWithoutSubTeacherInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutSubTeacherInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutSubTeacherInput, subjectsUncheckedUpdateWithoutSubTeacherInput>
  }

  export type subjectsUpdateWithoutSubTeacherInput = {
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    result?: resultUpdateManyWithoutSubjectsNestedInput
  }

  export type subjectsUncheckedUpdateWithoutSubTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    result?: resultUncheckedUpdateManyWithoutSubjectsNestedInput
  }

  export type usersUpsertWithoutSubTeacherInput = {
    update: XOR<usersUpdateWithoutSubTeacherInput, usersUncheckedUpdateWithoutSubTeacherInput>
    create: XOR<usersCreateWithoutSubTeacherInput, usersUncheckedCreateWithoutSubTeacherInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutSubTeacherInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutSubTeacherInput, usersUncheckedUpdateWithoutSubTeacherInput>
  }

  export type usersUpdateWithoutSubTeacherInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    attendance?: attendanceUpdateManyWithoutStudentNestedInput
    result?: resultUpdateManyWithoutStudentNestedInput
  }

  export type usersUncheckedUpdateWithoutSubTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    attendance?: attendanceUncheckedUpdateManyWithoutStudentNestedInput
    result?: resultUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type usersCreateWithoutAttendanceInput = {
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherCreateNestedManyWithoutUsersInput
    result?: resultCreateNestedManyWithoutStudentInput
  }

  export type usersUncheckedCreateWithoutAttendanceInput = {
    id?: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherUncheckedCreateNestedManyWithoutUsersInput
    result?: resultUncheckedCreateNestedManyWithoutStudentInput
  }

  export type usersCreateOrConnectWithoutAttendanceInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
  }

  export type usersUpsertWithoutAttendanceInput = {
    update: XOR<usersUpdateWithoutAttendanceInput, usersUncheckedUpdateWithoutAttendanceInput>
    create: XOR<usersCreateWithoutAttendanceInput, usersUncheckedCreateWithoutAttendanceInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAttendanceInput, usersUncheckedUpdateWithoutAttendanceInput>
  }

  export type usersUpdateWithoutAttendanceInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUpdateManyWithoutUsersNestedInput
    result?: resultUpdateManyWithoutStudentNestedInput
  }

  export type usersUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUncheckedUpdateManyWithoutUsersNestedInput
    result?: resultUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type resultCreateWithoutExamsInput = {
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    student: usersCreateNestedOneWithoutResultInput
    subjects: subjectsCreateNestedOneWithoutResultInput
  }

  export type resultUncheckedCreateWithoutExamsInput = {
    stdId: number
    subId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultCreateOrConnectWithoutExamsInput = {
    where: resultWhereUniqueInput
    create: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput>
  }

  export type resultCreateManyExamsInputEnvelope = {
    data: resultCreateManyExamsInput | resultCreateManyExamsInput[]
    skipDuplicates?: boolean
  }

  export type resultUpsertWithWhereUniqueWithoutExamsInput = {
    where: resultWhereUniqueInput
    update: XOR<resultUpdateWithoutExamsInput, resultUncheckedUpdateWithoutExamsInput>
    create: XOR<resultCreateWithoutExamsInput, resultUncheckedCreateWithoutExamsInput>
  }

  export type resultUpdateWithWhereUniqueWithoutExamsInput = {
    where: resultWhereUniqueInput
    data: XOR<resultUpdateWithoutExamsInput, resultUncheckedUpdateWithoutExamsInput>
  }

  export type resultUpdateManyWithWhereWithoutExamsInput = {
    where: resultScalarWhereInput
    data: XOR<resultUpdateManyMutationInput, resultUncheckedUpdateManyWithoutExamsInput>
  }

  export type usersCreateWithoutResultInput = {
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherCreateNestedManyWithoutUsersInput
    attendance?: attendanceCreateNestedManyWithoutStudentInput
  }

  export type usersUncheckedCreateWithoutResultInput = {
    id?: number
    roleId: number
    fname: string
    lname: string
    email: string
    dob: Date | string
    class: number
    grno?: string | null
    contact: string
    salary?: number | null
    joiningDate: Date | string
    addr?: string | null
    password?: string | null
    activationCode: string
    isActive: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherUncheckedCreateNestedManyWithoutUsersInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type usersCreateOrConnectWithoutResultInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutResultInput, usersUncheckedCreateWithoutResultInput>
  }

  export type subjectsCreateWithoutResultInput = {
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsUncheckedCreateWithoutResultInput = {
    id?: number
    class: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
    subTeacher?: subTeacherUncheckedCreateNestedManyWithoutSubjectsInput
  }

  export type subjectsCreateOrConnectWithoutResultInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutResultInput, subjectsUncheckedCreateWithoutResultInput>
  }

  export type examsCreateWithoutResultInput = {
    examName: string
    examDate: Date | string
    totalMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type examsUncheckedCreateWithoutResultInput = {
    id?: number
    examName: string
    examDate: Date | string
    totalMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type examsCreateOrConnectWithoutResultInput = {
    where: examsWhereUniqueInput
    create: XOR<examsCreateWithoutResultInput, examsUncheckedCreateWithoutResultInput>
  }

  export type usersUpsertWithoutResultInput = {
    update: XOR<usersUpdateWithoutResultInput, usersUncheckedUpdateWithoutResultInput>
    create: XOR<usersCreateWithoutResultInput, usersUncheckedCreateWithoutResultInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutResultInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutResultInput, usersUncheckedUpdateWithoutResultInput>
  }

  export type usersUpdateWithoutResultInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUpdateManyWithoutUsersNestedInput
    attendance?: attendanceUpdateManyWithoutStudentNestedInput
  }

  export type usersUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: IntFieldUpdateOperationsInput | number
    grno?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: StringFieldUpdateOperationsInput | string
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    addr?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    activationCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUncheckedUpdateManyWithoutUsersNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type subjectsUpsertWithoutResultInput = {
    update: XOR<subjectsUpdateWithoutResultInput, subjectsUncheckedUpdateWithoutResultInput>
    create: XOR<subjectsCreateWithoutResultInput, subjectsUncheckedCreateWithoutResultInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutResultInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutResultInput, subjectsUncheckedUpdateWithoutResultInput>
  }

  export type subjectsUpdateWithoutResultInput = {
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUpdateManyWithoutSubjectsNestedInput
  }

  export type subjectsUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subTeacher?: subTeacherUncheckedUpdateManyWithoutSubjectsNestedInput
  }

  export type examsUpsertWithoutResultInput = {
    update: XOR<examsUpdateWithoutResultInput, examsUncheckedUpdateWithoutResultInput>
    create: XOR<examsCreateWithoutResultInput, examsUncheckedCreateWithoutResultInput>
    where?: examsWhereInput
  }

  export type examsUpdateToOneWithWhereWithoutResultInput = {
    where?: examsWhereInput
    data: XOR<examsUpdateWithoutResultInput, examsUncheckedUpdateWithoutResultInput>
  }

  export type examsUpdateWithoutResultInput = {
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type examsUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    examName?: StringFieldUpdateOperationsInput | string
    examDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherCreateManyUsersInput = {
    subId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type attendanceCreateManyStudentInput = {
    id?: number
    attDate: Date | string
    present: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultCreateManyStudentInput = {
    subId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subjects?: subjectsUpdateOneRequiredWithoutSubTeacherNestedInput
  }

  export type subTeacherUncheckedUpdateWithoutUsersInput = {
    subId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherUncheckedUpdateManyWithoutUsersInput = {
    subId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceUpdateWithoutStudentInput = {
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type attendanceUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    attDate?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUpdateWithoutStudentInput = {
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    subjects?: subjectsUpdateOneRequiredWithoutResultNestedInput
    exams?: examsUpdateOneRequiredWithoutResultNestedInput
  }

  export type resultUncheckedUpdateWithoutStudentInput = {
    subId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUncheckedUpdateManyWithoutStudentInput = {
    subId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherCreateManySubjectsInput = {
    teacherId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultCreateManySubjectsInput = {
    stdId: number
    examId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type subTeacherUpdateWithoutSubjectsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateOneRequiredWithoutSubTeacherNestedInput
  }

  export type subTeacherUncheckedUpdateWithoutSubjectsInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type subTeacherUncheckedUpdateManyWithoutSubjectsInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUpdateWithoutSubjectsInput = {
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    student?: usersUpdateOneRequiredWithoutResultNestedInput
    exams?: examsUpdateOneRequiredWithoutResultNestedInput
  }

  export type resultUncheckedUpdateWithoutSubjectsInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUncheckedUpdateManyWithoutSubjectsInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultCreateManyExamsInput = {
    stdId: number
    subId: number
    examdate: Date | string
    obtainedMarks: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type resultUpdateWithoutExamsInput = {
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    student?: usersUpdateOneRequiredWithoutResultNestedInput
    subjects?: subjectsUpdateOneRequiredWithoutResultNestedInput
  }

  export type resultUncheckedUpdateWithoutExamsInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    subId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type resultUncheckedUpdateManyWithoutExamsInput = {
    stdId?: IntFieldUpdateOperationsInput | number
    subId?: IntFieldUpdateOperationsInput | number
    examdate?: DateTimeFieldUpdateOperationsInput | Date | string
    obtainedMarks?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectsCountOutputTypeDefaultArgs instead
     */
    export type SubjectsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamsCountOutputTypeDefaultArgs instead
     */
    export type ExamsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roleDefaultArgs instead
     */
    export type roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use subjectsDefaultArgs instead
     */
    export type subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = subjectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use subTeacherDefaultArgs instead
     */
    export type subTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = subTeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use attendanceDefaultArgs instead
     */
    export type attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = attendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use examsDefaultArgs instead
     */
    export type examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = examsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use resultDefaultArgs instead
     */
    export type resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = resultDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}